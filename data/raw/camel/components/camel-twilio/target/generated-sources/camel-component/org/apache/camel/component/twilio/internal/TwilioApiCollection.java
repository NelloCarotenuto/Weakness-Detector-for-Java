/*
 * Camel ApiCollection generated by camel-api-component-maven-plugin
 * Generated on: Wed Sep 11 15:31:49 CEST 2019
 */
package org.apache.camel.component.twilio.internal;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import org.apache.camel.component.twilio.TwilioConfiguration;
import org.apache.camel.component.twilio.AccountEndpointConfiguration;
import org.apache.camel.component.twilio.AddressEndpointConfiguration;
import org.apache.camel.component.twilio.ApplicationEndpointConfiguration;
import org.apache.camel.component.twilio.AvailablePhoneNumberCountryEndpointConfiguration;
import org.apache.camel.component.twilio.CallEndpointConfiguration;
import org.apache.camel.component.twilio.ConferenceEndpointConfiguration;
import org.apache.camel.component.twilio.ConnectAppEndpointConfiguration;
import org.apache.camel.component.twilio.IncomingPhoneNumberEndpointConfiguration;
import org.apache.camel.component.twilio.KeyEndpointConfiguration;
import org.apache.camel.component.twilio.MessageEndpointConfiguration;
import org.apache.camel.component.twilio.NewKeyEndpointConfiguration;
import org.apache.camel.component.twilio.NewSigningKeyEndpointConfiguration;
import org.apache.camel.component.twilio.NotificationEndpointConfiguration;
import org.apache.camel.component.twilio.OutgoingCallerIdEndpointConfiguration;
import org.apache.camel.component.twilio.QueueEndpointConfiguration;
import org.apache.camel.component.twilio.RecordingEndpointConfiguration;
import org.apache.camel.component.twilio.ShortCodeEndpointConfiguration;
import org.apache.camel.component.twilio.SigningKeyEndpointConfiguration;
import org.apache.camel.component.twilio.TokenEndpointConfiguration;
import org.apache.camel.component.twilio.TranscriptionEndpointConfiguration;
import org.apache.camel.component.twilio.ValidationRequestEndpointConfiguration;
import org.apache.camel.component.twilio.DependentPhoneNumberEndpointConfiguration;
import org.apache.camel.component.twilio.LocalEndpointConfiguration;
import org.apache.camel.component.twilio.MobileEndpointConfiguration;
import org.apache.camel.component.twilio.TollFreeEndpointConfiguration;
import org.apache.camel.component.twilio.FeedbackEndpointConfiguration;
import org.apache.camel.component.twilio.FeedbackSummaryEndpointConfiguration;
import org.apache.camel.component.twilio.NotificationEndpointConfiguration;
import org.apache.camel.component.twilio.RecordingEndpointConfiguration;
import org.apache.camel.component.twilio.ParticipantEndpointConfiguration;
import org.apache.camel.component.twilio.LocalEndpointConfiguration;
import org.apache.camel.component.twilio.MobileEndpointConfiguration;
import org.apache.camel.component.twilio.TollFreeEndpointConfiguration;
import org.apache.camel.component.twilio.FeedbackEndpointConfiguration;
import org.apache.camel.component.twilio.MediaEndpointConfiguration;
import org.apache.camel.component.twilio.MemberEndpointConfiguration;
import org.apache.camel.component.twilio.AddOnResultEndpointConfiguration;
import org.apache.camel.component.twilio.TranscriptionEndpointConfiguration;
import org.apache.camel.component.twilio.PayloadEndpointConfiguration;
import org.apache.camel.component.twilio.CredentialListEndpointConfiguration;
import org.apache.camel.component.twilio.DomainEndpointConfiguration;
import org.apache.camel.component.twilio.IpAccessControlListEndpointConfiguration;
import org.apache.camel.component.twilio.CredentialEndpointConfiguration;
import org.apache.camel.component.twilio.CredentialListMappingEndpointConfiguration;
import org.apache.camel.component.twilio.IpAccessControlListMappingEndpointConfiguration;
import org.apache.camel.component.twilio.IpAddressEndpointConfiguration;
import org.apache.camel.component.twilio.RecordEndpointConfiguration;
import org.apache.camel.component.twilio.TriggerEndpointConfiguration;
import org.apache.camel.component.twilio.AllTimeEndpointConfiguration;
import org.apache.camel.component.twilio.DailyEndpointConfiguration;
import org.apache.camel.component.twilio.LastMonthEndpointConfiguration;
import org.apache.camel.component.twilio.MonthlyEndpointConfiguration;
import org.apache.camel.component.twilio.ThisMonthEndpointConfiguration;
import org.apache.camel.component.twilio.TodayEndpointConfiguration;
import org.apache.camel.component.twilio.YearlyEndpointConfiguration;
import org.apache.camel.component.twilio.YesterdayEndpointConfiguration;

import org.apache.camel.util.component.ApiCollection;
import org.apache.camel.util.component.ApiMethod;
import org.apache.camel.util.component.ApiMethodHelper;

/**
 * Camel {@link ApiCollection} for Twilio
 */
public final class TwilioApiCollection extends ApiCollection<TwilioApiName, TwilioConfiguration> {

    private static TwilioApiCollection collection;

    private TwilioApiCollection() {
        final Map<String, String> aliases = new HashMap<String, String>();
        final Map<TwilioApiName, ApiMethodHelper<? extends ApiMethod>> apiHelpers = new HashMap<>();
        final Map<Class<? extends ApiMethod>, TwilioApiName> apiMethods = new HashMap<>();

        List<String> nullableArgs;

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.ACCOUNT, new ApiMethodHelper<AccountApiMethod>(AccountApiMethod.class, aliases, nullableArgs));
        apiMethods.put(AccountApiMethod.class, TwilioApiName.ACCOUNT);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.ADDRESS, new ApiMethodHelper<AddressApiMethod>(AddressApiMethod.class, aliases, nullableArgs));
        apiMethods.put(AddressApiMethod.class, TwilioApiName.ADDRESS);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.APPLICATION, new ApiMethodHelper<ApplicationApiMethod>(ApplicationApiMethod.class, aliases, nullableArgs));
        apiMethods.put(ApplicationApiMethod.class, TwilioApiName.APPLICATION);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.AVAILABLE_PHONE_NUMBER_COUNTRY, new ApiMethodHelper<AvailablePhoneNumberCountryApiMethod>(AvailablePhoneNumberCountryApiMethod.class, aliases, nullableArgs));
        apiMethods.put(AvailablePhoneNumberCountryApiMethod.class, TwilioApiName.AVAILABLE_PHONE_NUMBER_COUNTRY);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.CALL, new ApiMethodHelper<CallApiMethod>(CallApiMethod.class, aliases, nullableArgs));
        apiMethods.put(CallApiMethod.class, TwilioApiName.CALL);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.CONFERENCE, new ApiMethodHelper<ConferenceApiMethod>(ConferenceApiMethod.class, aliases, nullableArgs));
        apiMethods.put(ConferenceApiMethod.class, TwilioApiName.CONFERENCE);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.CONNECT_APP, new ApiMethodHelper<ConnectAppApiMethod>(ConnectAppApiMethod.class, aliases, nullableArgs));
        apiMethods.put(ConnectAppApiMethod.class, TwilioApiName.CONNECT_APP);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.INCOMING_PHONE_NUMBER, new ApiMethodHelper<IncomingPhoneNumberApiMethod>(IncomingPhoneNumberApiMethod.class, aliases, nullableArgs));
        apiMethods.put(IncomingPhoneNumberApiMethod.class, TwilioApiName.INCOMING_PHONE_NUMBER);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.KEY, new ApiMethodHelper<KeyApiMethod>(KeyApiMethod.class, aliases, nullableArgs));
        apiMethods.put(KeyApiMethod.class, TwilioApiName.KEY);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.MESSAGE, new ApiMethodHelper<MessageApiMethod>(MessageApiMethod.class, aliases, nullableArgs));
        apiMethods.put(MessageApiMethod.class, TwilioApiName.MESSAGE);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.NEW_KEY, new ApiMethodHelper<NewKeyApiMethod>(NewKeyApiMethod.class, aliases, nullableArgs));
        apiMethods.put(NewKeyApiMethod.class, TwilioApiName.NEW_KEY);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.NEW_SIGNING_KEY, new ApiMethodHelper<NewSigningKeyApiMethod>(NewSigningKeyApiMethod.class, aliases, nullableArgs));
        apiMethods.put(NewSigningKeyApiMethod.class, TwilioApiName.NEW_SIGNING_KEY);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.NOTIFICATION, new ApiMethodHelper<NotificationApiMethod>(NotificationApiMethod.class, aliases, nullableArgs));
        apiMethods.put(NotificationApiMethod.class, TwilioApiName.NOTIFICATION);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.OUTGOING_CALLER_ID, new ApiMethodHelper<OutgoingCallerIdApiMethod>(OutgoingCallerIdApiMethod.class, aliases, nullableArgs));
        apiMethods.put(OutgoingCallerIdApiMethod.class, TwilioApiName.OUTGOING_CALLER_ID);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.QUEUE, new ApiMethodHelper<QueueApiMethod>(QueueApiMethod.class, aliases, nullableArgs));
        apiMethods.put(QueueApiMethod.class, TwilioApiName.QUEUE);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.RECORDING, new ApiMethodHelper<RecordingApiMethod>(RecordingApiMethod.class, aliases, nullableArgs));
        apiMethods.put(RecordingApiMethod.class, TwilioApiName.RECORDING);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.SHORT_CODE, new ApiMethodHelper<ShortCodeApiMethod>(ShortCodeApiMethod.class, aliases, nullableArgs));
        apiMethods.put(ShortCodeApiMethod.class, TwilioApiName.SHORT_CODE);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.SIGNING_KEY, new ApiMethodHelper<SigningKeyApiMethod>(SigningKeyApiMethod.class, aliases, nullableArgs));
        apiMethods.put(SigningKeyApiMethod.class, TwilioApiName.SIGNING_KEY);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.TOKEN, new ApiMethodHelper<TokenApiMethod>(TokenApiMethod.class, aliases, nullableArgs));
        apiMethods.put(TokenApiMethod.class, TwilioApiName.TOKEN);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.TRANSCRIPTION, new ApiMethodHelper<TranscriptionApiMethod>(TranscriptionApiMethod.class, aliases, nullableArgs));
        apiMethods.put(TranscriptionApiMethod.class, TwilioApiName.TRANSCRIPTION);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.VALIDATION_REQUEST, new ApiMethodHelper<ValidationRequestApiMethod>(ValidationRequestApiMethod.class, aliases, nullableArgs));
        apiMethods.put(ValidationRequestApiMethod.class, TwilioApiName.VALIDATION_REQUEST);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.ADDRESS_DEPENDENT_PHONE_NUMBER, new ApiMethodHelper<DependentPhoneNumberApiMethod>(DependentPhoneNumberApiMethod.class, aliases, nullableArgs));
        apiMethods.put(DependentPhoneNumberApiMethod.class, TwilioApiName.ADDRESS_DEPENDENT_PHONE_NUMBER);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.AVAILABLE_PHONE_NUMBER_COUNTRY_LOCAL, new ApiMethodHelper<LocalApiMethod>(LocalApiMethod.class, aliases, nullableArgs));
        apiMethods.put(LocalApiMethod.class, TwilioApiName.AVAILABLE_PHONE_NUMBER_COUNTRY_LOCAL);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.AVAILABLE_PHONE_NUMBER_COUNTRY_MOBILE, new ApiMethodHelper<MobileApiMethod>(MobileApiMethod.class, aliases, nullableArgs));
        apiMethods.put(MobileApiMethod.class, TwilioApiName.AVAILABLE_PHONE_NUMBER_COUNTRY_MOBILE);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.AVAILABLE_PHONE_NUMBER_COUNTRY_TOLL_FREE, new ApiMethodHelper<TollFreeApiMethod>(TollFreeApiMethod.class, aliases, nullableArgs));
        apiMethods.put(TollFreeApiMethod.class, TwilioApiName.AVAILABLE_PHONE_NUMBER_COUNTRY_TOLL_FREE);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.CALL_FEEDBACK, new ApiMethodHelper<FeedbackApiMethod>(FeedbackApiMethod.class, aliases, nullableArgs));
        apiMethods.put(FeedbackApiMethod.class, TwilioApiName.CALL_FEEDBACK);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.CALL_FEEDBACK_SUMMARY, new ApiMethodHelper<FeedbackSummaryApiMethod>(FeedbackSummaryApiMethod.class, aliases, nullableArgs));
        apiMethods.put(FeedbackSummaryApiMethod.class, TwilioApiName.CALL_FEEDBACK_SUMMARY);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.CALL_NOTIFICATION, new ApiMethodHelper<NotificationApiMethod>(NotificationApiMethod.class, aliases, nullableArgs));
        apiMethods.put(NotificationApiMethod.class, TwilioApiName.CALL_NOTIFICATION);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.CALL_RECORDING, new ApiMethodHelper<RecordingApiMethod>(RecordingApiMethod.class, aliases, nullableArgs));
        apiMethods.put(RecordingApiMethod.class, TwilioApiName.CALL_RECORDING);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.CONFERENCE_PARTICIPANT, new ApiMethodHelper<ParticipantApiMethod>(ParticipantApiMethod.class, aliases, nullableArgs));
        apiMethods.put(ParticipantApiMethod.class, TwilioApiName.CONFERENCE_PARTICIPANT);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.INCOMING_PHONE_NUMBER_LOCAL, new ApiMethodHelper<LocalApiMethod>(LocalApiMethod.class, aliases, nullableArgs));
        apiMethods.put(LocalApiMethod.class, TwilioApiName.INCOMING_PHONE_NUMBER_LOCAL);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.INCOMING_PHONE_NUMBER_MOBILE, new ApiMethodHelper<MobileApiMethod>(MobileApiMethod.class, aliases, nullableArgs));
        apiMethods.put(MobileApiMethod.class, TwilioApiName.INCOMING_PHONE_NUMBER_MOBILE);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.INCOMING_PHONE_NUMBER_TOLL_FREE, new ApiMethodHelper<TollFreeApiMethod>(TollFreeApiMethod.class, aliases, nullableArgs));
        apiMethods.put(TollFreeApiMethod.class, TwilioApiName.INCOMING_PHONE_NUMBER_TOLL_FREE);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.MESSAGE_FEEDBACK, new ApiMethodHelper<FeedbackApiMethod>(FeedbackApiMethod.class, aliases, nullableArgs));
        apiMethods.put(FeedbackApiMethod.class, TwilioApiName.MESSAGE_FEEDBACK);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.MESSAGE_MEDIA, new ApiMethodHelper<MediaApiMethod>(MediaApiMethod.class, aliases, nullableArgs));
        apiMethods.put(MediaApiMethod.class, TwilioApiName.MESSAGE_MEDIA);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.QUEUE_MEMBER, new ApiMethodHelper<MemberApiMethod>(MemberApiMethod.class, aliases, nullableArgs));
        apiMethods.put(MemberApiMethod.class, TwilioApiName.QUEUE_MEMBER);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.RECORDING_ADD_ON_RESULT, new ApiMethodHelper<AddOnResultApiMethod>(AddOnResultApiMethod.class, aliases, nullableArgs));
        apiMethods.put(AddOnResultApiMethod.class, TwilioApiName.RECORDING_ADD_ON_RESULT);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.RECORDING_TRANSCRIPTION, new ApiMethodHelper<TranscriptionApiMethod>(TranscriptionApiMethod.class, aliases, nullableArgs));
        apiMethods.put(TranscriptionApiMethod.class, TwilioApiName.RECORDING_TRANSCRIPTION);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.RECORDING_ADD_ON_RESULT_PAYLOAD, new ApiMethodHelper<PayloadApiMethod>(PayloadApiMethod.class, aliases, nullableArgs));
        apiMethods.put(PayloadApiMethod.class, TwilioApiName.RECORDING_ADD_ON_RESULT_PAYLOAD);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.SIP_CREDENTIAL_LIST, new ApiMethodHelper<CredentialListApiMethod>(CredentialListApiMethod.class, aliases, nullableArgs));
        apiMethods.put(CredentialListApiMethod.class, TwilioApiName.SIP_CREDENTIAL_LIST);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.SIP_DOMAIN, new ApiMethodHelper<DomainApiMethod>(DomainApiMethod.class, aliases, nullableArgs));
        apiMethods.put(DomainApiMethod.class, TwilioApiName.SIP_DOMAIN);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.SIP_IP_ACCESS_CONTROL_LIST, new ApiMethodHelper<IpAccessControlListApiMethod>(IpAccessControlListApiMethod.class, aliases, nullableArgs));
        apiMethods.put(IpAccessControlListApiMethod.class, TwilioApiName.SIP_IP_ACCESS_CONTROL_LIST);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.SIP_CREDENTIAL_LIST_CREDENTIAL, new ApiMethodHelper<CredentialApiMethod>(CredentialApiMethod.class, aliases, nullableArgs));
        apiMethods.put(CredentialApiMethod.class, TwilioApiName.SIP_CREDENTIAL_LIST_CREDENTIAL);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.SIP_DOMAIN_CREDENTIAL_LIST_MAPPING, new ApiMethodHelper<CredentialListMappingApiMethod>(CredentialListMappingApiMethod.class, aliases, nullableArgs));
        apiMethods.put(CredentialListMappingApiMethod.class, TwilioApiName.SIP_DOMAIN_CREDENTIAL_LIST_MAPPING);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.SIP_DOMAIN_IP_ACCESS_CONTROL_LIST_MAPPING, new ApiMethodHelper<IpAccessControlListMappingApiMethod>(IpAccessControlListMappingApiMethod.class, aliases, nullableArgs));
        apiMethods.put(IpAccessControlListMappingApiMethod.class, TwilioApiName.SIP_DOMAIN_IP_ACCESS_CONTROL_LIST_MAPPING);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.SIP_IP_ACCESS_CONTROL_LIST_IP_ADDRESS, new ApiMethodHelper<IpAddressApiMethod>(IpAddressApiMethod.class, aliases, nullableArgs));
        apiMethods.put(IpAddressApiMethod.class, TwilioApiName.SIP_IP_ACCESS_CONTROL_LIST_IP_ADDRESS);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.USAGE_RECORD, new ApiMethodHelper<RecordApiMethod>(RecordApiMethod.class, aliases, nullableArgs));
        apiMethods.put(RecordApiMethod.class, TwilioApiName.USAGE_RECORD);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.USAGE_TRIGGER, new ApiMethodHelper<TriggerApiMethod>(TriggerApiMethod.class, aliases, nullableArgs));
        apiMethods.put(TriggerApiMethod.class, TwilioApiName.USAGE_TRIGGER);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.USAGE_RECORD_ALL_TIME, new ApiMethodHelper<AllTimeApiMethod>(AllTimeApiMethod.class, aliases, nullableArgs));
        apiMethods.put(AllTimeApiMethod.class, TwilioApiName.USAGE_RECORD_ALL_TIME);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.USAGE_RECORD_DAILY, new ApiMethodHelper<DailyApiMethod>(DailyApiMethod.class, aliases, nullableArgs));
        apiMethods.put(DailyApiMethod.class, TwilioApiName.USAGE_RECORD_DAILY);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.USAGE_RECORD_LAST_MONTH, new ApiMethodHelper<LastMonthApiMethod>(LastMonthApiMethod.class, aliases, nullableArgs));
        apiMethods.put(LastMonthApiMethod.class, TwilioApiName.USAGE_RECORD_LAST_MONTH);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.USAGE_RECORD_MONTHLY, new ApiMethodHelper<MonthlyApiMethod>(MonthlyApiMethod.class, aliases, nullableArgs));
        apiMethods.put(MonthlyApiMethod.class, TwilioApiName.USAGE_RECORD_MONTHLY);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.USAGE_RECORD_THIS_MONTH, new ApiMethodHelper<ThisMonthApiMethod>(ThisMonthApiMethod.class, aliases, nullableArgs));
        apiMethods.put(ThisMonthApiMethod.class, TwilioApiName.USAGE_RECORD_THIS_MONTH);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.USAGE_RECORD_TODAY, new ApiMethodHelper<TodayApiMethod>(TodayApiMethod.class, aliases, nullableArgs));
        apiMethods.put(TodayApiMethod.class, TwilioApiName.USAGE_RECORD_TODAY);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.USAGE_RECORD_YEARLY, new ApiMethodHelper<YearlyApiMethod>(YearlyApiMethod.class, aliases, nullableArgs));
        apiMethods.put(YearlyApiMethod.class, TwilioApiName.USAGE_RECORD_YEARLY);

        aliases.clear();
        aliases.put("^creator$", "create");
        aliases.put("^deleter$", "delete");
        aliases.put("^fetcher$", "fetch");
        aliases.put("^reader$", "read");
        aliases.put("^updater$", "update");
        nullableArgs = Arrays.asList();
        apiHelpers.put(TwilioApiName.USAGE_RECORD_YESTERDAY, new ApiMethodHelper<YesterdayApiMethod>(YesterdayApiMethod.class, aliases, nullableArgs));
        apiMethods.put(YesterdayApiMethod.class, TwilioApiName.USAGE_RECORD_YESTERDAY);

        setApiHelpers(apiHelpers);
        setApiMethods(apiMethods);
    }

    public TwilioConfiguration getEndpointConfiguration(TwilioApiName apiName) {
        TwilioConfiguration result = null;
        switch (apiName) {
        case ACCOUNT:
            result = new AccountEndpointConfiguration();
            break;
        case ADDRESS:
            result = new AddressEndpointConfiguration();
            break;
        case APPLICATION:
            result = new ApplicationEndpointConfiguration();
            break;
        case AVAILABLE_PHONE_NUMBER_COUNTRY:
            result = new AvailablePhoneNumberCountryEndpointConfiguration();
            break;
        case CALL:
            result = new CallEndpointConfiguration();
            break;
        case CONFERENCE:
            result = new ConferenceEndpointConfiguration();
            break;
        case CONNECT_APP:
            result = new ConnectAppEndpointConfiguration();
            break;
        case INCOMING_PHONE_NUMBER:
            result = new IncomingPhoneNumberEndpointConfiguration();
            break;
        case KEY:
            result = new KeyEndpointConfiguration();
            break;
        case MESSAGE:
            result = new MessageEndpointConfiguration();
            break;
        case NEW_KEY:
            result = new NewKeyEndpointConfiguration();
            break;
        case NEW_SIGNING_KEY:
            result = new NewSigningKeyEndpointConfiguration();
            break;
        case NOTIFICATION:
            result = new NotificationEndpointConfiguration();
            break;
        case OUTGOING_CALLER_ID:
            result = new OutgoingCallerIdEndpointConfiguration();
            break;
        case QUEUE:
            result = new QueueEndpointConfiguration();
            break;
        case RECORDING:
            result = new RecordingEndpointConfiguration();
            break;
        case SHORT_CODE:
            result = new ShortCodeEndpointConfiguration();
            break;
        case SIGNING_KEY:
            result = new SigningKeyEndpointConfiguration();
            break;
        case TOKEN:
            result = new TokenEndpointConfiguration();
            break;
        case TRANSCRIPTION:
            result = new TranscriptionEndpointConfiguration();
            break;
        case VALIDATION_REQUEST:
            result = new ValidationRequestEndpointConfiguration();
            break;
        case ADDRESS_DEPENDENT_PHONE_NUMBER:
            result = new DependentPhoneNumberEndpointConfiguration();
            break;
        case AVAILABLE_PHONE_NUMBER_COUNTRY_LOCAL:
            result = new LocalEndpointConfiguration();
            break;
        case AVAILABLE_PHONE_NUMBER_COUNTRY_MOBILE:
            result = new MobileEndpointConfiguration();
            break;
        case AVAILABLE_PHONE_NUMBER_COUNTRY_TOLL_FREE:
            result = new TollFreeEndpointConfiguration();
            break;
        case CALL_FEEDBACK:
            result = new FeedbackEndpointConfiguration();
            break;
        case CALL_FEEDBACK_SUMMARY:
            result = new FeedbackSummaryEndpointConfiguration();
            break;
        case CALL_NOTIFICATION:
            result = new NotificationEndpointConfiguration();
            break;
        case CALL_RECORDING:
            result = new RecordingEndpointConfiguration();
            break;
        case CONFERENCE_PARTICIPANT:
            result = new ParticipantEndpointConfiguration();
            break;
        case INCOMING_PHONE_NUMBER_LOCAL:
            result = new LocalEndpointConfiguration();
            break;
        case INCOMING_PHONE_NUMBER_MOBILE:
            result = new MobileEndpointConfiguration();
            break;
        case INCOMING_PHONE_NUMBER_TOLL_FREE:
            result = new TollFreeEndpointConfiguration();
            break;
        case MESSAGE_FEEDBACK:
            result = new FeedbackEndpointConfiguration();
            break;
        case MESSAGE_MEDIA:
            result = new MediaEndpointConfiguration();
            break;
        case QUEUE_MEMBER:
            result = new MemberEndpointConfiguration();
            break;
        case RECORDING_ADD_ON_RESULT:
            result = new AddOnResultEndpointConfiguration();
            break;
        case RECORDING_TRANSCRIPTION:
            result = new TranscriptionEndpointConfiguration();
            break;
        case RECORDING_ADD_ON_RESULT_PAYLOAD:
            result = new PayloadEndpointConfiguration();
            break;
        case SIP_CREDENTIAL_LIST:
            result = new CredentialListEndpointConfiguration();
            break;
        case SIP_DOMAIN:
            result = new DomainEndpointConfiguration();
            break;
        case SIP_IP_ACCESS_CONTROL_LIST:
            result = new IpAccessControlListEndpointConfiguration();
            break;
        case SIP_CREDENTIAL_LIST_CREDENTIAL:
            result = new CredentialEndpointConfiguration();
            break;
        case SIP_DOMAIN_CREDENTIAL_LIST_MAPPING:
            result = new CredentialListMappingEndpointConfiguration();
            break;
        case SIP_DOMAIN_IP_ACCESS_CONTROL_LIST_MAPPING:
            result = new IpAccessControlListMappingEndpointConfiguration();
            break;
        case SIP_IP_ACCESS_CONTROL_LIST_IP_ADDRESS:
            result = new IpAddressEndpointConfiguration();
            break;
        case USAGE_RECORD:
            result = new RecordEndpointConfiguration();
            break;
        case USAGE_TRIGGER:
            result = new TriggerEndpointConfiguration();
            break;
        case USAGE_RECORD_ALL_TIME:
            result = new AllTimeEndpointConfiguration();
            break;
        case USAGE_RECORD_DAILY:
            result = new DailyEndpointConfiguration();
            break;
        case USAGE_RECORD_LAST_MONTH:
            result = new LastMonthEndpointConfiguration();
            break;
        case USAGE_RECORD_MONTHLY:
            result = new MonthlyEndpointConfiguration();
            break;
        case USAGE_RECORD_THIS_MONTH:
            result = new ThisMonthEndpointConfiguration();
            break;
        case USAGE_RECORD_TODAY:
            result = new TodayEndpointConfiguration();
            break;
        case USAGE_RECORD_YEARLY:
            result = new YearlyEndpointConfiguration();
            break;
        case USAGE_RECORD_YESTERDAY:
            result = new YesterdayEndpointConfiguration();
            break;
        }
        return result;
    }

    public static synchronized TwilioApiCollection getCollection() {
        if (collection == null) {
            collection = new TwilioApiCollection();
        }
        return collection;
    }
}
