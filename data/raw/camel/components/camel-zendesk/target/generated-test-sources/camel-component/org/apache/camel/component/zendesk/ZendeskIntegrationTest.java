/*
 * Camel Api Route test generated by camel-api-component-maven-plugin
 * Generated on: Wed Sep 11 15:33:11 CEST 2019
 */
package org.apache.camel.component.zendesk;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.builder.RouteBuilder;
import org.junit.Ignore;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.camel.component.zendesk.internal.ZendeskApiCollection;
import org.apache.camel.component.zendesk.internal.ZendeskApiMethod;

/**
 * Test class for {@link org.zendesk.client.v2.Zendesk} APIs.
 * TODO Move the file to src/test/java, populate parameter values, and remove @Ignore annotations.
 * The class source won't be generated again if the generator MOJO finds it under src/test/java.
 */
public class ZendeskIntegrationTest extends AbstractZendeskTestSupport {

    private static final Logger LOG = LoggerFactory.getLogger(ZendeskIntegrationTest.class);
    private static final String PATH_PREFIX = ZendeskApiCollection.getCollection().getApiName(ZendeskApiMethod.class).getName();

    // TODO provide parameter values for addTagToOrganisations
    @Ignore
    @Test
    public void testAddTagToOrganisations() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.id", 0L);
        // parameter type is String[]
        headers.put("CamelZendesk.tags", null);

        final java.util.List result = requestBodyAndHeaders("direct://ADDTAGTOORGANISATIONS", null, headers);

        assertNotNull("addTagToOrganisations result", result);
        LOG.debug("addTagToOrganisations: " + result);
    }

    // TODO provide parameter values for addTagToTicket
    @Ignore
    @Test
    public void testAddTagToTicket() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.id", 0L);
        // parameter type is String[]
        headers.put("CamelZendesk.tags", null);

        final java.util.List result = requestBodyAndHeaders("direct://ADDTAGTOTICKET", null, headers);

        assertNotNull("addTagToTicket result", result);
        LOG.debug("addTagToTicket: " + result);
    }

    // TODO provide parameter values for addTagToTopics
    @Ignore
    @Test
    public void testAddTagToTopics() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.id", 0L);
        // parameter type is String[]
        headers.put("CamelZendesk.tags", null);

        final java.util.List result = requestBodyAndHeaders("direct://ADDTAGTOTOPICS", null, headers);

        assertNotNull("addTagToTopics result", result);
        LOG.debug("addTagToTopics: " + result);
    }

    // TODO provide parameter values for associateAttachmentsToArticle
    @Ignore
    @Test
    public void testAssociateAttachmentsToArticle() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is String
        headers.put("CamelZendesk.idArticle", null);
        // parameter type is java.util.List
        headers.put("CamelZendesk.attachments", null);

        requestBodyAndHeaders("direct://ASSOCIATEATTACHMENTSTOARTICLE", null, headers);
    }

    // TODO provide parameter values for changeUserPassword
    @Ignore
    @Test
    public void testChangeUserPassword() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.User
        headers.put("CamelZendesk.user", null);
        // parameter type is String
        headers.put("CamelZendesk.oldPassword", null);
        // parameter type is String
        headers.put("CamelZendesk.newPassword", null);

        requestBodyAndHeaders("direct://CHANGEUSERPASSWORD", null, headers);
    }

    // TODO provide parameter values for createArticle
    @Ignore
    @Test
    public void testCreateArticle() throws Exception {
        // using org.zendesk.client.v2.model.hc.Article message body for single parameter "article"
        final org.zendesk.client.v2.model.hc.Article result = requestBody("direct://CREATEARTICLE", null);

        assertNotNull("createArticle result", result);
        LOG.debug("createArticle: " + result);
    }

    // TODO provide parameter values for createAutomation
    @Ignore
    @Test
    public void testCreateAutomation() throws Exception {
        // using org.zendesk.client.v2.model.Automation message body for single parameter "automation"
        final org.zendesk.client.v2.model.Automation result = requestBody("direct://CREATEAUTOMATION", null);

        assertNotNull("createAutomation result", result);
        LOG.debug("createAutomation: " + result);
    }

    // TODO provide parameter values for createCategory
    @Ignore
    @Test
    public void testCreateCategory() throws Exception {
        // using org.zendesk.client.v2.model.hc.Category message body for single parameter "category"
        final org.zendesk.client.v2.model.hc.Category result = requestBody("direct://CREATECATEGORY", null);

        assertNotNull("createCategory result", result);
        LOG.debug("createCategory: " + result);
    }

    // TODO provide parameter values for createComment
    @Ignore
    @Test
    public void testCreateComment() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.ticketId", 0L);
        // parameter type is org.zendesk.client.v2.model.Comment
        headers.put("CamelZendesk.comment", null);

        final org.zendesk.client.v2.model.Ticket result = requestBodyAndHeaders("direct://CREATECOMMENT", null, headers);

        assertNotNull("createComment result", result);
        LOG.debug("createComment: " + result);
    }

    // TODO provide parameter values for createForum
    @Ignore
    @Test
    public void testCreateForum() throws Exception {
        // using org.zendesk.client.v2.model.Forum message body for single parameter "forum"
        final org.zendesk.client.v2.model.Forum result = requestBody("direct://CREATEFORUM", null);

        assertNotNull("createForum result", result);
        LOG.debug("createForum: " + result);
    }

    // TODO provide parameter values for createGroup
    @Ignore
    @Test
    public void testCreateGroup() throws Exception {
        // using org.zendesk.client.v2.model.Group message body for single parameter "group"
        final org.zendesk.client.v2.model.Group result = requestBody("direct://CREATEGROUP", null);

        assertNotNull("createGroup result", result);
        LOG.debug("createGroup: " + result);
    }

    // TODO provide parameter values for createGroupMembership
    @Ignore
    @Test
    public void testCreateGroupMembership() throws Exception {
        // using org.zendesk.client.v2.model.GroupMembership message body for single parameter "groupMembership"
        final org.zendesk.client.v2.model.GroupMembership result = requestBody("direct://CREATEGROUPMEMBERSHIP", null);

        assertNotNull("createGroupMembership result", result);
        LOG.debug("createGroupMembership: " + result);
    }

    // TODO provide parameter values for createGroupMembership
    @Ignore
    @Test
    public void testCreateGroupMembership_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.user_id", 0L);
        // parameter type is org.zendesk.client.v2.model.GroupMembership
        headers.put("CamelZendesk.groupMembership", null);

        final org.zendesk.client.v2.model.GroupMembership result = requestBodyAndHeaders("direct://CREATEGROUPMEMBERSHIP_1", null, headers);

        assertNotNull("createGroupMembership result", result);
        LOG.debug("createGroupMembership: " + result);
    }

    // TODO provide parameter values for createMacro
    @Ignore
    @Test
    public void testCreateMacro() throws Exception {
        // using org.zendesk.client.v2.model.Macro message body for single parameter "macro"
        final org.zendesk.client.v2.model.Macro result = requestBody("direct://CREATEMACRO", null);

        assertNotNull("createMacro result", result);
        LOG.debug("createMacro: " + result);
    }

    // TODO provide parameter values for createOrUpdateUser
    @Ignore
    @Test
    public void testCreateOrUpdateUser() throws Exception {
        // using org.zendesk.client.v2.model.User message body for single parameter "user"
        final org.zendesk.client.v2.model.User result = requestBody("direct://CREATEORUPDATEUSER", null);

        assertNotNull("createOrUpdateUser result", result);
        LOG.debug("createOrUpdateUser: " + result);
    }

    // TODO provide parameter values for createOrganization
    @Ignore
    @Test
    public void testCreateOrganization() throws Exception {
        // using org.zendesk.client.v2.model.Organization message body for single parameter "organization"
        final org.zendesk.client.v2.model.Organization result = requestBody("direct://CREATEORGANIZATION", null);

        assertNotNull("createOrganization result", result);
        LOG.debug("createOrganization: " + result);
    }

    // TODO provide parameter values for createOrganizationMembership
    @Ignore
    @Test
    public void testCreateOrganizationMembership() throws Exception {
        // using org.zendesk.client.v2.model.OrganizationMembership message body for single parameter "organizationMembership"
        final org.zendesk.client.v2.model.OrganizationMembership result = requestBody("direct://CREATEORGANIZATIONMEMBERSHIP", null);

        assertNotNull("createOrganizationMembership result", result);
        LOG.debug("createOrganizationMembership: " + result);
    }

    // TODO provide parameter values for createOrganizationMembership
    @Ignore
    @Test
    public void testCreateOrganizationMembership_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.user_id", 0L);
        // parameter type is org.zendesk.client.v2.model.OrganizationMembership
        headers.put("CamelZendesk.organizationMembership", null);

        final org.zendesk.client.v2.model.OrganizationMembership result = requestBodyAndHeaders("direct://CREATEORGANIZATIONMEMBERSHIP_1", null, headers);

        assertNotNull("createOrganizationMembership result", result);
        LOG.debug("createOrganizationMembership: " + result);
    }

    // TODO provide parameter values for createOrganizations
    @Ignore
    @Test
    public void testCreateOrganizations() throws Exception {
        // using java.util.List message body for single parameter "organizationList"
        final org.zendesk.client.v2.model.JobStatus result = requestBody("direct://CREATEORGANIZATIONS", null);

        assertNotNull("createOrganizations result", result);
        LOG.debug("createOrganizations: " + result);
    }

    // TODO provide parameter values for createOrganizations
    @Ignore
    @Test
    public void testCreateOrganizations_1() throws Exception {
        // using org.zendesk.client.v2.model.Organization[] message body for single parameter "organizations"
        final org.zendesk.client.v2.model.JobStatus result = requestBody("direct://CREATEORGANIZATIONS_1", null);

        assertNotNull("createOrganizations result", result);
        LOG.debug("createOrganizations: " + result);
    }

    // TODO provide parameter values for createOrganizationsAsync
    @Ignore
    @Test
    public void testCreateOrganizationsAsync() throws Exception {
        // using java.util.List message body for single parameter "organizationList"
        final com.ning.http.client.ListenableFuture result = requestBody("direct://CREATEORGANIZATIONSASYNC", null);

        assertNotNull("createOrganizationsAsync result", result);
        LOG.debug("createOrganizationsAsync: " + result);
    }

    // TODO provide parameter values for createRequest
    @Ignore
    @Test
    public void testCreateRequest() throws Exception {
        // using org.zendesk.client.v2.model.Request message body for single parameter "request"
        final org.zendesk.client.v2.model.Request result = requestBody("direct://CREATEREQUEST", null);

        assertNotNull("createRequest result", result);
        LOG.debug("createRequest: " + result);
    }

    // TODO provide parameter values for createSatisfactionRating
    @Ignore
    @Test
    public void testCreateSatisfactionRating() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.Ticket
        headers.put("CamelZendesk.ticket", null);
        // parameter type is org.zendesk.client.v2.model.SatisfactionRating
        headers.put("CamelZendesk.satisfactionRating", null);

        final org.zendesk.client.v2.model.SatisfactionRating result = requestBodyAndHeaders("direct://CREATESATISFACTIONRATING", null, headers);

        assertNotNull("createSatisfactionRating result", result);
        LOG.debug("createSatisfactionRating: " + result);
    }

    // TODO provide parameter values for createSatisfactionRating
    @Ignore
    @Test
    public void testCreateSatisfactionRating_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.ticketId", 0L);
        // parameter type is org.zendesk.client.v2.model.SatisfactionRating
        headers.put("CamelZendesk.satisfactionRating", null);

        final org.zendesk.client.v2.model.SatisfactionRating result = requestBodyAndHeaders("direct://CREATESATISFACTIONRATING_1", null, headers);

        assertNotNull("createSatisfactionRating result", result);
        LOG.debug("createSatisfactionRating: " + result);
    }

    // TODO provide parameter values for createSection
    @Ignore
    @Test
    public void testCreateSection() throws Exception {
        // using org.zendesk.client.v2.model.hc.Section message body for single parameter "section"
        final org.zendesk.client.v2.model.hc.Section result = requestBody("direct://CREATESECTION", null);

        assertNotNull("createSection result", result);
        LOG.debug("createSection: " + result);
    }

    // TODO provide parameter values for createTarget
    @Ignore
    @Test
    public void testCreateTarget() throws Exception {
        // using org.zendesk.client.v2.model.targets.Target message body for single parameter "target"
        final org.zendesk.client.v2.model.targets.Target result = requestBody("direct://CREATETARGET", null);

        assertNotNull("createTarget result", result);
        LOG.debug("createTarget: " + result);
    }

    // TODO provide parameter values for createTicket
    @Ignore
    @Test
    public void testCreateTicket() throws Exception {
        // using org.zendesk.client.v2.model.Ticket message body for single parameter "ticket"
        final org.zendesk.client.v2.model.Ticket result = requestBody("direct://CREATETICKET", null);

        assertNotNull("createTicket result", result);
        LOG.debug("createTicket: " + result);
    }

    // TODO provide parameter values for createTicketField
    @Ignore
    @Test
    public void testCreateTicketField() throws Exception {
        // using org.zendesk.client.v2.model.Field message body for single parameter "field"
        final org.zendesk.client.v2.model.Field result = requestBody("direct://CREATETICKETFIELD", null);

        assertNotNull("createTicketField result", result);
        LOG.debug("createTicketField: " + result);
    }

    // TODO provide parameter values for createTicketFromTweet
    @Ignore
    @Test
    public void testCreateTicketFromTweet() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.tweetId", 0L);
        headers.put("CamelZendesk.monitorId", 0L);

        final org.zendesk.client.v2.model.Ticket result = requestBodyAndHeaders("direct://CREATETICKETFROMTWEET", null, headers);

        assertNotNull("createTicketFromTweet result", result);
        LOG.debug("createTicketFromTweet: " + result);
    }

    // TODO provide parameter values for createTickets
    @Ignore
    @Test
    public void testCreateTickets() throws Exception {
        // using java.util.List message body for single parameter "ticketList"
        final org.zendesk.client.v2.model.JobStatus result = requestBody("direct://CREATETICKETS", null);

        assertNotNull("createTickets result", result);
        LOG.debug("createTickets: " + result);
    }

    // TODO provide parameter values for createTickets
    @Ignore
    @Test
    public void testCreateTickets_1() throws Exception {
        // using org.zendesk.client.v2.model.Ticket[] message body for single parameter "tickets"
        final org.zendesk.client.v2.model.JobStatus result = requestBody("direct://CREATETICKETS_1", null);

        assertNotNull("createTickets result", result);
        LOG.debug("createTickets: " + result);
    }

    // TODO provide parameter values for createTicketsAsync
    @Ignore
    @Test
    public void testCreateTicketsAsync() throws Exception {
        // using java.util.List message body for single parameter "ticketList"
        final com.ning.http.client.ListenableFuture result = requestBody("direct://CREATETICKETSASYNC", null);

        assertNotNull("createTicketsAsync result", result);
        LOG.debug("createTicketsAsync: " + result);
    }

    // TODO provide parameter values for createTopic
    @Ignore
    @Test
    public void testCreateTopic() throws Exception {
        // using org.zendesk.client.v2.model.Topic message body for single parameter "topic"
        final org.zendesk.client.v2.model.Topic result = requestBody("direct://CREATETOPIC", null);

        assertNotNull("createTopic result", result);
        LOG.debug("createTopic: " + result);
    }

    // TODO provide parameter values for createTrigger
    @Ignore
    @Test
    public void testCreateTrigger() throws Exception {
        // using org.zendesk.client.v2.model.Trigger message body for single parameter "trigger"
        final org.zendesk.client.v2.model.Trigger result = requestBody("direct://CREATETRIGGER", null);

        assertNotNull("createTrigger result", result);
        LOG.debug("createTrigger: " + result);
    }

    // TODO provide parameter values for createUpload
    @Ignore
    @Test
    public void testCreateUpload() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is String
        headers.put("CamelZendesk.fileName", null);
        // parameter type is byte[]
        headers.put("CamelZendesk.content", null);

        final org.zendesk.client.v2.model.Attachment.Upload result = requestBodyAndHeaders("direct://CREATEUPLOAD", null, headers);

        assertNotNull("createUpload result", result);
        LOG.debug("createUpload: " + result);
    }

    // TODO provide parameter values for createUpload
    @Ignore
    @Test
    public void testCreateUpload_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is String
        headers.put("CamelZendesk.fileName", null);
        // parameter type is String
        headers.put("CamelZendesk.contentType", null);
        // parameter type is byte[]
        headers.put("CamelZendesk.content", null);

        final org.zendesk.client.v2.model.Attachment.Upload result = requestBodyAndHeaders("direct://CREATEUPLOAD_1", null, headers);

        assertNotNull("createUpload result", result);
        LOG.debug("createUpload: " + result);
    }

    // TODO provide parameter values for createUpload
    @Ignore
    @Test
    public void testCreateUpload_2() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is String
        headers.put("CamelZendesk.token", null);
        // parameter type is String
        headers.put("CamelZendesk.fileName", null);
        // parameter type is String
        headers.put("CamelZendesk.contentType", null);
        // parameter type is byte[]
        headers.put("CamelZendesk.content", null);

        final org.zendesk.client.v2.model.Attachment.Upload result = requestBodyAndHeaders("direct://CREATEUPLOAD_2", null, headers);

        assertNotNull("createUpload result", result);
        LOG.debug("createUpload: " + result);
    }

    // TODO provide parameter values for createUploadArticle
    @Ignore
    @Test
    public void testCreateUploadArticle() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.articleId0", 0L);
        // parameter type is java.io.File
        headers.put("CamelZendesk.file", null);

        final org.zendesk.client.v2.model.hc.ArticleAttachments result = requestBodyAndHeaders("direct://CREATEUPLOADARTICLE", null, headers);

        assertNotNull("createUploadArticle result", result);
        LOG.debug("createUploadArticle: " + result);
    }

    // TODO provide parameter values for createUser
    @Ignore
    @Test
    public void testCreateUser() throws Exception {
        // using org.zendesk.client.v2.model.User message body for single parameter "user"
        final org.zendesk.client.v2.model.User result = requestBody("direct://CREATEUSER", null);

        assertNotNull("createUser result", result);
        LOG.debug("createUser: " + result);
    }

    // TODO provide parameter values for createUserIdentity
    @Ignore
    @Test
    public void testCreateUserIdentity() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.User
        headers.put("CamelZendesk.user", null);
        // parameter type is org.zendesk.client.v2.model.Identity
        headers.put("CamelZendesk.identity", null);

        final org.zendesk.client.v2.model.Identity result = requestBodyAndHeaders("direct://CREATEUSERIDENTITY", null, headers);

        assertNotNull("createUserIdentity result", result);
        LOG.debug("createUserIdentity: " + result);
    }

    // TODO provide parameter values for createUserIdentity
    @Ignore
    @Test
    public void testCreateUserIdentity_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.userId", 0L);
        // parameter type is org.zendesk.client.v2.model.Identity
        headers.put("CamelZendesk.identity", null);

        final org.zendesk.client.v2.model.Identity result = requestBodyAndHeaders("direct://CREATEUSERIDENTITY_1", null, headers);

        assertNotNull("createUserIdentity result", result);
        LOG.debug("createUserIdentity: " + result);
    }

    // TODO provide parameter values for createUsers
    @Ignore
    @Test
    public void testCreateUsers() throws Exception {
        // using java.util.List message body for single parameter "userList"
        final org.zendesk.client.v2.model.JobStatus result = requestBody("direct://CREATEUSERS", null);

        assertNotNull("createUsers result", result);
        LOG.debug("createUsers: " + result);
    }

    // TODO provide parameter values for createUsers
    @Ignore
    @Test
    public void testCreateUsers_1() throws Exception {
        // using org.zendesk.client.v2.model.User[] message body for single parameter "users"
        final org.zendesk.client.v2.model.JobStatus result = requestBody("direct://CREATEUSERS_1", null);

        assertNotNull("createUsers result", result);
        LOG.debug("createUsers: " + result);
    }

    // TODO provide parameter values for createUsersAsync
    @Ignore
    @Test
    public void testCreateUsersAsync() throws Exception {
        // using java.util.List message body for single parameter "userList"
        final com.ning.http.client.ListenableFuture result = requestBody("direct://CREATEUSERSASYNC", null);

        assertNotNull("createUsersAsync result", result);
        LOG.debug("createUsersAsync: " + result);
    }

    // TODO provide parameter values for deleteArticle
    @Ignore
    @Test
    public void testDeleteArticle() throws Exception {
        // using org.zendesk.client.v2.model.hc.Article message body for single parameter "article"
        requestBody("direct://DELETEARTICLE", null);
    }

    // TODO provide parameter values for deleteArticleAttachment
    @Ignore
    @Test
    public void testDeleteArticleAttachment() throws Exception {
        // using org.zendesk.client.v2.model.hc.ArticleAttachments message body for single parameter "articleAttachments"
        requestBody("direct://DELETEARTICLEATTACHMENT", null);
    }

    // TODO provide parameter values for deleteArticleAttachment
    @Ignore
    @Test
    public void testDeleteArticleAttachment_1() throws Exception {
        // using long message body for single parameter "id"
        requestBody("direct://DELETEARTICLEATTACHMENT_1", 0L);
    }

    // TODO provide parameter values for deleteAttachment
    @Ignore
    @Test
    public void testDeleteAttachment() throws Exception {
        // using org.zendesk.client.v2.model.Attachment message body for single parameter "attachment"
        requestBody("direct://DELETEATTACHMENT", null);
    }

    // TODO provide parameter values for deleteAttachment
    @Ignore
    @Test
    public void testDeleteAttachment_1() throws Exception {
        // using long message body for single parameter "id"
        requestBody("direct://DELETEATTACHMENT_1", 0L);
    }

    // TODO provide parameter values for deleteAutomation
    @Ignore
    @Test
    public void testDeleteAutomation() throws Exception {
        // using long message body for single parameter "automationId0"
        requestBody("direct://DELETEAUTOMATION", 0L);
    }

    // TODO provide parameter values for deleteCategory
    @Ignore
    @Test
    public void testDeleteCategory() throws Exception {
        // using org.zendesk.client.v2.model.hc.Category message body for single parameter "category"
        requestBody("direct://DELETECATEGORY", null);
    }

    // TODO provide parameter values for deleteForum
    @Ignore
    @Test
    public void testDeleteForum() throws Exception {
        // using org.zendesk.client.v2.model.Forum message body for single parameter "forum"
        requestBody("direct://DELETEFORUM", null);
    }

    // TODO provide parameter values for deleteGroup
    @Ignore
    @Test
    public void testDeleteGroup() throws Exception {
        // using org.zendesk.client.v2.model.Group message body for single parameter "group"
        requestBody("direct://DELETEGROUP", null);
    }

    // TODO provide parameter values for deleteGroup
    @Ignore
    @Test
    public void testDeleteGroup_1() throws Exception {
        // using long message body for single parameter "id"
        requestBody("direct://DELETEGROUP_1", 0L);
    }

    // TODO provide parameter values for deleteGroupMembership
    @Ignore
    @Test
    public void testDeleteGroupMembership() throws Exception {
        // using org.zendesk.client.v2.model.GroupMembership message body for single parameter "groupMembership"
        requestBody("direct://DELETEGROUPMEMBERSHIP", null);
    }

    // TODO provide parameter values for deleteGroupMembership
    @Ignore
    @Test
    public void testDeleteGroupMembership_1() throws Exception {
        // using long message body for single parameter "id"
        requestBody("direct://DELETEGROUPMEMBERSHIP_1", 0L);
    }

    // TODO provide parameter values for deleteGroupMembership
    @Ignore
    @Test
    public void testDeleteGroupMembership_2() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.user_id", 0L);
        // parameter type is org.zendesk.client.v2.model.GroupMembership
        headers.put("CamelZendesk.groupMembership", null);

        requestBodyAndHeaders("direct://DELETEGROUPMEMBERSHIP_2", null, headers);
    }

    // TODO provide parameter values for deleteGroupMembership
    @Ignore
    @Test
    public void testDeleteGroupMembership_3() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.user_id", 0L);
        headers.put("CamelZendesk.group_membership_id", 0L);

        requestBodyAndHeaders("direct://DELETEGROUPMEMBERSHIP_3", null, headers);
    }

    // TODO provide parameter values for deleteOrganization
    @Ignore
    @Test
    public void testDeleteOrganization() throws Exception {
        // using long message body for single parameter "id"
        requestBody("direct://DELETEORGANIZATION", 0L);
    }

    // TODO provide parameter values for deleteOrganization
    @Ignore
    @Test
    public void testDeleteOrganization_1() throws Exception {
        // using org.zendesk.client.v2.model.Organization message body for single parameter "organization"
        requestBody("direct://DELETEORGANIZATION_1", null);
    }

    // TODO provide parameter values for deleteOrganizationMembership
    @Ignore
    @Test
    public void testDeleteOrganizationMembership() throws Exception {
        // using long message body for single parameter "id"
        requestBody("direct://DELETEORGANIZATIONMEMBERSHIP", 0L);
    }

    // TODO provide parameter values for deleteOrganizationMembership
    @Ignore
    @Test
    public void testDeleteOrganizationMembership_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.user_id", 0L);
        // parameter type is org.zendesk.client.v2.model.OrganizationMembership
        headers.put("CamelZendesk.organizationMembership", null);

        requestBodyAndHeaders("direct://DELETEORGANIZATIONMEMBERSHIP_1", null, headers);
    }

    // TODO provide parameter values for deleteOrganizationMembership
    @Ignore
    @Test
    public void testDeleteOrganizationMembership_2() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.user_id", 0L);
        headers.put("CamelZendesk.organization_membership_id", 0L);

        requestBodyAndHeaders("direct://DELETEORGANIZATIONMEMBERSHIP_2", null, headers);
    }

    // TODO provide parameter values for deleteSection
    @Ignore
    @Test
    public void testDeleteSection() throws Exception {
        // using org.zendesk.client.v2.model.hc.Section message body for single parameter "section"
        requestBody("direct://DELETESECTION", null);
    }

    // TODO provide parameter values for deleteSuspendedTicket
    @Ignore
    @Test
    public void testDeleteSuspendedTicket() throws Exception {
        // using long message body for single parameter "id"
        requestBody("direct://DELETESUSPENDEDTICKET", 0L);
    }

    // TODO provide parameter values for deleteSuspendedTicket
    @Ignore
    @Test
    public void testDeleteSuspendedTicket_1() throws Exception {
        // using org.zendesk.client.v2.model.SuspendedTicket message body for single parameter "suspendedTicket"
        requestBody("direct://DELETESUSPENDEDTICKET_1", null);
    }

    // TODO provide parameter values for deleteTarget
    @Ignore
    @Test
    public void testDeleteTarget() throws Exception {
        // using long message body for single parameter "targetId"
        requestBody("direct://DELETETARGET", 0L);
    }

    // TODO provide parameter values for deleteTicket
    @Ignore
    @Test
    public void testDeleteTicket() throws Exception {
        // using long message body for single parameter "id"
        requestBody("direct://DELETETICKET", 0L);
    }

    // TODO provide parameter values for deleteTicket
    @Ignore
    @Test
    public void testDeleteTicket_1() throws Exception {
        // using org.zendesk.client.v2.model.Ticket message body for single parameter "ticket"
        requestBody("direct://DELETETICKET_1", null);
    }

    // TODO provide parameter values for deleteTicketField
    @Ignore
    @Test
    public void testDeleteTicketField() throws Exception {
        // using org.zendesk.client.v2.model.Field message body for single parameter "field"
        requestBody("direct://DELETETICKETFIELD", null);
    }

    // TODO provide parameter values for deleteTicketField
    @Ignore
    @Test
    public void testDeleteTicketField_1() throws Exception {
        // using long message body for single parameter "id"
        requestBody("direct://DELETETICKETFIELD_1", 0L);
    }

    // TODO provide parameter values for deleteTickets
    @Ignore
    @Test
    public void testDeleteTickets() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.id", 0L);
        // parameter type is long[]
        headers.put("CamelZendesk.ids", null);

        requestBodyAndHeaders("direct://DELETETICKETS", null, headers);
    }

    // TODO provide parameter values for deleteTopic
    @Ignore
    @Test
    public void testDeleteTopic() throws Exception {
        // using org.zendesk.client.v2.model.Topic message body for single parameter "topic"
        requestBody("direct://DELETETOPIC", null);
    }

    // TODO provide parameter values for deleteTrigger
    @Ignore
    @Test
    public void testDeleteTrigger() throws Exception {
        // using long message body for single parameter "triggerId"
        requestBody("direct://DELETETRIGGER", 0L);
    }

    // TODO provide parameter values for deleteUpload
    @Ignore
    @Test
    public void testDeleteUpload() throws Exception {
        // using String message body for single parameter "token"
        requestBody("direct://DELETEUPLOAD", null);
    }

    // TODO provide parameter values for deleteUpload
    @Ignore
    @Test
    public void testDeleteUpload_1() throws Exception {
        // using org.zendesk.client.v2.model.Attachment.Upload message body for single parameter "upload"
        requestBody("direct://DELETEUPLOAD_1", null);
    }

    // TODO provide parameter values for deleteUser
    @Ignore
    @Test
    public void testDeleteUser() throws Exception {
        // using long message body for single parameter "id"
        requestBody("direct://DELETEUSER", 0L);
    }

    // TODO provide parameter values for deleteUser
    @Ignore
    @Test
    public void testDeleteUser_1() throws Exception {
        // using org.zendesk.client.v2.model.User message body for single parameter "user"
        requestBody("direct://DELETEUSER_1", null);
    }

    // TODO provide parameter values for deleteUserIdentity
    @Ignore
    @Test
    public void testDeleteUserIdentity() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.User
        headers.put("CamelZendesk.user", null);
        // parameter type is org.zendesk.client.v2.model.Identity
        headers.put("CamelZendesk.identity", null);

        requestBodyAndHeaders("direct://DELETEUSERIDENTITY", null, headers);
    }

    // TODO provide parameter values for deleteUserIdentity
    @Ignore
    @Test
    public void testDeleteUserIdentity_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.User
        headers.put("CamelZendesk.user", null);
        headers.put("CamelZendesk.identityId", 0L);

        requestBodyAndHeaders("direct://DELETEUSERIDENTITY_1", null, headers);
    }

    // TODO provide parameter values for deleteUserIdentity
    @Ignore
    @Test
    public void testDeleteUserIdentity_2() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.userId", 0L);
        headers.put("CamelZendesk.identityId", 0L);

        requestBodyAndHeaders("direct://DELETEUSERIDENTITY_2", null, headers);
    }

    // TODO provide parameter values for getArticle
    @Ignore
    @Test
    public void testGetArticle() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.hc.Article result = requestBody("direct://GETARTICLE", 0L);

        assertNotNull("getArticle result", result);
        LOG.debug("getArticle: " + result);
    }

    // TODO provide parameter values for getArticleFromSearch
    @Ignore
    @Test
    public void testGetArticleFromSearch() throws Exception {
        // using String message body for single parameter "searchTerm"
        final Iterable result = requestBody("direct://GETARTICLEFROMSEARCH", null);

        assertNotNull("getArticleFromSearch result", result);
        LOG.debug("getArticleFromSearch: " + result);
    }

    // TODO provide parameter values for getArticleFromSearch
    @Ignore
    @Test
    public void testGetArticleFromSearch_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is String
        headers.put("CamelZendesk.searchTerm", null);
        // parameter type is Long
        headers.put("CamelZendesk.sectionId", null);

        final Iterable result = requestBodyAndHeaders("direct://GETARTICLEFROMSEARCH_1", null, headers);

        assertNotNull("getArticleFromSearch result", result);
        LOG.debug("getArticleFromSearch: " + result);
    }

    // TODO provide parameter values for getArticleSubscriptions
    @Ignore
    @Test
    public void testGetArticleSubscriptions() throws Exception {
        // using Long message body for single parameter "articleId"
        final Iterable result = requestBody("direct://GETARTICLESUBSCRIPTIONS", null);

        assertNotNull("getArticleSubscriptions result", result);
        LOG.debug("getArticleSubscriptions: " + result);
    }

    // TODO provide parameter values for getArticleSubscriptions
    @Ignore
    @Test
    public void testGetArticleSubscriptions_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Long
        headers.put("CamelZendesk.articleId", null);
        // parameter type is String
        headers.put("CamelZendesk.locale", null);

        final Iterable result = requestBodyAndHeaders("direct://GETARTICLESUBSCRIPTIONS_1", null, headers);

        assertNotNull("getArticleSubscriptions result", result);
        LOG.debug("getArticleSubscriptions: " + result);
    }

    // TODO provide parameter values for getArticleTranslations
    @Ignore
    @Test
    public void testGetArticleTranslations() throws Exception {
        // using Long message body for single parameter "articleId"
        final Iterable result = requestBody("direct://GETARTICLETRANSLATIONS", null);

        assertNotNull("getArticleTranslations result", result);
        LOG.debug("getArticleTranslations: " + result);
    }

    @Ignore
    @Test
    public void testGetArticles() throws Exception {
        final Iterable result = requestBody("direct://GETARTICLES", null);

        assertNotNull("getArticles result", result);
        LOG.debug("getArticles: " + result);
    }

    // TODO provide parameter values for getArticles
    @Ignore
    @Test
    public void testGetArticles_1() throws Exception {
        // using org.zendesk.client.v2.model.hc.Category message body for single parameter "category"
        final Iterable result = requestBody("direct://GETARTICLES_1", null);

        assertNotNull("getArticles result", result);
        LOG.debug("getArticles: " + result);
    }

    // TODO provide parameter values for getArticlesFromPage
    @Ignore
    @Test
    public void testGetArticlesFromPage() throws Exception {
        // using int message body for single parameter "page"
        final java.util.List result = requestBody("direct://GETARTICLESFROMPAGE", 0);

        assertNotNull("getArticlesFromPage result", result);
        LOG.debug("getArticlesFromPage: " + result);
    }

    // TODO provide parameter values for getArticlesIncrementally
    @Ignore
    @Test
    public void testGetArticlesIncrementally() throws Exception {
        // using java.util.Date message body for single parameter "startTime"
        final Iterable result = requestBody("direct://GETARTICLESINCREMENTALLY", null);

        assertNotNull("getArticlesIncrementally result", result);
        LOG.debug("getArticlesIncrementally: " + result);
    }

    @Ignore
    @Test
    public void testGetAssignableGroupMemberships() throws Exception {
        final Iterable result = requestBody("direct://GETASSIGNABLEGROUPMEMBERSHIPS", null);

        assertNotNull("getAssignableGroupMemberships result", result);
        LOG.debug("getAssignableGroupMemberships: " + result);
    }

    // TODO provide parameter values for getAssignableGroupMemberships
    @Ignore
    @Test
    public void testGetAssignableGroupMemberships_1() throws Exception {
        // using long message body for single parameter "group_id"
        final java.util.List result = requestBody("direct://GETASSIGNABLEGROUPMEMBERSHIPS_1", 0L);

        assertNotNull("getAssignableGroupMemberships result", result);
        LOG.debug("getAssignableGroupMemberships: " + result);
    }

    @Ignore
    @Test
    public void testGetAssignableGroups() throws Exception {
        final Iterable result = requestBody("direct://GETASSIGNABLEGROUPS", null);

        assertNotNull("getAssignableGroups result", result);
        LOG.debug("getAssignableGroups: " + result);
    }

    // TODO provide parameter values for getAttachment
    @Ignore
    @Test
    public void testGetAttachment() throws Exception {
        // using org.zendesk.client.v2.model.Attachment message body for single parameter "attachment"
        final org.zendesk.client.v2.model.Attachment result = requestBody("direct://GETATTACHMENT", null);

        assertNotNull("getAttachment result", result);
        LOG.debug("getAttachment: " + result);
    }

    // TODO provide parameter values for getAttachment
    @Ignore
    @Test
    public void testGetAttachment_1() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.Attachment result = requestBody("direct://GETATTACHMENT_1", 0L);

        assertNotNull("getAttachment result", result);
        LOG.debug("getAttachment: " + result);
    }

    // TODO provide parameter values for getAttachmentsFromArticle
    @Ignore
    @Test
    public void testGetAttachmentsFromArticle() throws Exception {
        // using Long message body for single parameter "articleID"
        final java.util.List result = requestBody("direct://GETATTACHMENTSFROMARTICLE", null);

        assertNotNull("getAttachmentsFromArticle result", result);
        LOG.debug("getAttachmentsFromArticle: " + result);
    }

    @Ignore
    @Test
    public void testGetAuthenticatedUser() throws Exception {
        final org.zendesk.client.v2.model.User result = requestBody("direct://GETAUTHENTICATEDUSER", null);

        assertNotNull("getAuthenticatedUser result", result);
        LOG.debug("getAuthenticatedUser: " + result);
    }

    // TODO provide parameter values for getAutoCompleteOrganizations
    @Ignore
    @Test
    public void testGetAutoCompleteOrganizations() throws Exception {
        // using String message body for single parameter "name"
        final Iterable result = requestBody("direct://GETAUTOCOMPLETEORGANIZATIONS", null);

        assertNotNull("getAutoCompleteOrganizations result", result);
        LOG.debug("getAutoCompleteOrganizations: " + result);
    }

    // TODO provide parameter values for getAutomation
    @Ignore
    @Test
    public void testGetAutomation() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.Automation result = requestBody("direct://GETAUTOMATION", 0L);

        assertNotNull("getAutomation result", result);
        LOG.debug("getAutomation: " + result);
    }

    @Ignore
    @Test
    public void testGetAutomations() throws Exception {
        final Iterable result = requestBody("direct://GETAUTOMATIONS", null);

        assertNotNull("getAutomations result", result);
        LOG.debug("getAutomations: " + result);
    }

    @Ignore
    @Test
    public void testGetBrands() throws Exception {
        final java.util.List result = requestBody("direct://GETBRANDS", null);

        assertNotNull("getBrands result", result);
        LOG.debug("getBrands: " + result);
    }

    @Ignore
    @Test
    public void testGetCCRequests() throws Exception {
        final Iterable result = requestBody("direct://GETCCREQUESTS", null);

        assertNotNull("getCCRequests result", result);
        LOG.debug("getCCRequests: " + result);
    }

    @Ignore
    @Test
    public void testGetCategories() throws Exception {
        final Iterable result = requestBody("direct://GETCATEGORIES", null);

        assertNotNull("getCategories result", result);
        LOG.debug("getCategories: " + result);
    }

    // TODO provide parameter values for getCategory
    @Ignore
    @Test
    public void testGetCategory() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.hc.Category result = requestBody("direct://GETCATEGORY", 0L);

        assertNotNull("getCategory result", result);
        LOG.debug("getCategory: " + result);
    }

    // TODO provide parameter values for getCategoryTranslations
    @Ignore
    @Test
    public void testGetCategoryTranslations() throws Exception {
        // using Long message body for single parameter "categoryId"
        final Iterable result = requestBody("direct://GETCATEGORYTRANSLATIONS", null);

        assertNotNull("getCategoryTranslations result", result);
        LOG.debug("getCategoryTranslations: " + result);
    }

    @Ignore
    @Test
    public void testGetCurrentUser() throws Exception {
        final org.zendesk.client.v2.model.User result = requestBody("direct://GETCURRENTUSER", null);

        assertNotNull("getCurrentUser result", result);
        LOG.debug("getCurrentUser: " + result);
    }

    @Ignore
    @Test
    public void testGetCustomAgentRoles() throws Exception {
        final Iterable result = requestBody("direct://GETCUSTOMAGENTROLES", null);

        assertNotNull("getCustomAgentRoles result", result);
        LOG.debug("getCustomAgentRoles: " + result);
    }

    // TODO provide parameter values for getForum
    @Ignore
    @Test
    public void testGetForum() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.Forum result = requestBody("direct://GETFORUM", 0L);

        assertNotNull("getForum result", result);
        LOG.debug("getForum: " + result);
    }

    @Ignore
    @Test
    public void testGetForums() throws Exception {
        final Iterable result = requestBody("direct://GETFORUMS", null);

        assertNotNull("getForums result", result);
        LOG.debug("getForums: " + result);
    }

    // TODO provide parameter values for getForums
    @Ignore
    @Test
    public void testGetForums_1() throws Exception {
        // using long message body for single parameter "category_id"
        final java.util.List result = requestBody("direct://GETFORUMS_1", 0L);

        assertNotNull("getForums result", result);
        LOG.debug("getForums: " + result);
    }

    // TODO provide parameter values for getGroup
    @Ignore
    @Test
    public void testGetGroup() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.Group result = requestBody("direct://GETGROUP", 0L);

        assertNotNull("getGroup result", result);
        LOG.debug("getGroup: " + result);
    }

    // TODO provide parameter values for getGroupMembership
    @Ignore
    @Test
    public void testGetGroupMembership() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.GroupMembership result = requestBody("direct://GETGROUPMEMBERSHIP", 0L);

        assertNotNull("getGroupMembership result", result);
        LOG.debug("getGroupMembership: " + result);
    }

    // TODO provide parameter values for getGroupMembership
    @Ignore
    @Test
    public void testGetGroupMembership_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.user_id", 0L);
        headers.put("CamelZendesk.group_membership_id", 0L);

        final org.zendesk.client.v2.model.GroupMembership result = requestBodyAndHeaders("direct://GETGROUPMEMBERSHIP_1", null, headers);

        assertNotNull("getGroupMembership result", result);
        LOG.debug("getGroupMembership: " + result);
    }

    // TODO provide parameter values for getGroupMembershipByUser
    @Ignore
    @Test
    public void testGetGroupMembershipByUser() throws Exception {
        // using long message body for single parameter "user_id"
        final java.util.List result = requestBody("direct://GETGROUPMEMBERSHIPBYUSER", 0L);

        assertNotNull("getGroupMembershipByUser result", result);
        LOG.debug("getGroupMembershipByUser: " + result);
    }

    @Ignore
    @Test
    public void testGetGroupMemberships() throws Exception {
        final Iterable result = requestBody("direct://GETGROUPMEMBERSHIPS", null);

        assertNotNull("getGroupMemberships result", result);
        LOG.debug("getGroupMemberships: " + result);
    }

    // TODO provide parameter values for getGroupMemberships
    @Ignore
    @Test
    public void testGetGroupMemberships_1() throws Exception {
        // using long message body for single parameter "group_id"
        final java.util.List result = requestBody("direct://GETGROUPMEMBERSHIPS_1", 0L);

        assertNotNull("getGroupMemberships result", result);
        LOG.debug("getGroupMemberships: " + result);
    }

    // TODO provide parameter values for getGroupOrganization
    @Ignore
    @Test
    public void testGetGroupOrganization() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.user_id", 0L);
        headers.put("CamelZendesk.organization_membership_id", 0L);

        final org.zendesk.client.v2.model.OrganizationMembership result = requestBodyAndHeaders("direct://GETGROUPORGANIZATION", null, headers);

        assertNotNull("getGroupOrganization result", result);
        LOG.debug("getGroupOrganization: " + result);
    }

    // TODO provide parameter values for getGroupUsers
    @Ignore
    @Test
    public void testGetGroupUsers() throws Exception {
        // using long message body for single parameter "id"
        final Iterable result = requestBody("direct://GETGROUPUSERS", 0L);

        assertNotNull("getGroupUsers result", result);
        LOG.debug("getGroupUsers: " + result);
    }

    @Ignore
    @Test
    public void testGetGroups() throws Exception {
        final Iterable result = requestBody("direct://GETGROUPS", null);

        assertNotNull("getGroups result", result);
        LOG.debug("getGroups: " + result);
    }

    // TODO provide parameter values for getHolidaysForSchedule
    @Ignore
    @Test
    public void testGetHolidaysForSchedule() throws Exception {
        // using org.zendesk.client.v2.model.schedules.Schedule message body for single parameter "schedule"
        final Iterable result = requestBody("direct://GETHOLIDAYSFORSCHEDULE", null);

        assertNotNull("getHolidaysForSchedule result", result);
        LOG.debug("getHolidaysForSchedule: " + result);
    }

    // TODO provide parameter values for getHolidaysForSchedule
    @Ignore
    @Test
    public void testGetHolidaysForSchedule_1() throws Exception {
        // using Long message body for single parameter "scheduleId"
        final Iterable result = requestBody("direct://GETHOLIDAYSFORSCHEDULE_1", null);

        assertNotNull("getHolidaysForSchedule result", result);
        LOG.debug("getHolidaysForSchedule: " + result);
    }

    // TODO provide parameter values for getIncrementalTicketsResult
    @Ignore
    @Test
    public void testGetIncrementalTicketsResult() throws Exception {
        // using long message body for single parameter "unixEpochTime"
        final java.util.Map result = requestBody("direct://GETINCREMENTALTICKETSRESULT", 0L);

        assertNotNull("getIncrementalTicketsResult result", result);
        LOG.debug("getIncrementalTicketsResult: " + result);
    }

    // TODO provide parameter values for getJobStatus
    @Ignore
    @Test
    public void testGetJobStatus() throws Exception {
        // using org.zendesk.client.v2.model.JobStatus message body for single parameter "status"
        final org.zendesk.client.v2.model.JobStatus result = requestBody("direct://GETJOBSTATUS", null);

        assertNotNull("getJobStatus result", result);
        LOG.debug("getJobStatus: " + result);
    }

    // TODO provide parameter values for getJobStatusAsync
    @Ignore
    @Test
    public void testGetJobStatusAsync() throws Exception {
        // using org.zendesk.client.v2.model.JobStatus message body for single parameter "status"
        final com.ning.http.client.ListenableFuture result = requestBody("direct://GETJOBSTATUSASYNC", null);

        assertNotNull("getJobStatusAsync result", result);
        LOG.debug("getJobStatusAsync: " + result);
    }

    // TODO provide parameter values for getJobStatuses
    @Ignore
    @Test
    public void testGetJobStatuses() throws Exception {
        // using java.util.List message body for single parameter "statuses"
        final java.util.List result = requestBody("direct://GETJOBSTATUSES", null);

        assertNotNull("getJobStatuses result", result);
        LOG.debug("getJobStatuses: " + result);
    }

    // TODO provide parameter values for getJobStatusesAsync
    @Ignore
    @Test
    public void testGetJobStatusesAsync() throws Exception {
        // using java.util.List message body for single parameter "statuses"
        final com.ning.http.client.ListenableFuture result = requestBody("direct://GETJOBSTATUSESASYNC", null);

        assertNotNull("getJobStatusesAsync result", result);
        LOG.debug("getJobStatusesAsync: " + result);
    }

    // TODO provide parameter values for getMacro
    @Ignore
    @Test
    public void testGetMacro() throws Exception {
        // using long message body for single parameter "macroId"
        final org.zendesk.client.v2.model.Macro result = requestBody("direct://GETMACRO", 0L);

        assertNotNull("getMacro result", result);
        LOG.debug("getMacro: " + result);
    }

    @Ignore
    @Test
    public void testGetMacros() throws Exception {
        final Iterable result = requestBody("direct://GETMACROS", null);

        assertNotNull("getMacros result", result);
        LOG.debug("getMacros: " + result);
    }

    @Ignore
    @Test
    public void testGetOpenRequests() throws Exception {
        final Iterable result = requestBody("direct://GETOPENREQUESTS", null);

        assertNotNull("getOpenRequests result", result);
        LOG.debug("getOpenRequests: " + result);
    }

    // TODO provide parameter values for getOrganization
    @Ignore
    @Test
    public void testGetOrganization() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.Organization result = requestBody("direct://GETORGANIZATION", 0L);

        assertNotNull("getOrganization result", result);
        LOG.debug("getOrganization: " + result);
    }

    @Ignore
    @Test
    public void testGetOrganizationFields() throws Exception {
        final Iterable result = requestBody("direct://GETORGANIZATIONFIELDS", null);

        assertNotNull("getOrganizationFields result", result);
        LOG.debug("getOrganizationFields: " + result);
    }

    // TODO provide parameter values for getOrganizationMembership
    @Ignore
    @Test
    public void testGetOrganizationMembership() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.OrganizationMembership result = requestBody("direct://GETORGANIZATIONMEMBERSHIP", 0L);

        assertNotNull("getOrganizationMembership result", result);
        LOG.debug("getOrganizationMembership: " + result);
    }

    // TODO provide parameter values for getOrganizationMembershipByUser
    @Ignore
    @Test
    public void testGetOrganizationMembershipByUser() throws Exception {
        // using long message body for single parameter "user_id"
        final java.util.List result = requestBody("direct://GETORGANIZATIONMEMBERSHIPBYUSER", 0L);

        assertNotNull("getOrganizationMembershipByUser result", result);
        LOG.debug("getOrganizationMembershipByUser: " + result);
    }

    // TODO provide parameter values for getOrganizationMembershipForUser
    @Ignore
    @Test
    public void testGetOrganizationMembershipForUser() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.user_id", 0L);
        headers.put("CamelZendesk.id", 0L);

        final org.zendesk.client.v2.model.OrganizationMembership result = requestBodyAndHeaders("direct://GETORGANIZATIONMEMBERSHIPFORUSER", null, headers);

        assertNotNull("getOrganizationMembershipForUser result", result);
        LOG.debug("getOrganizationMembershipForUser: " + result);
    }

    @Ignore
    @Test
    public void testGetOrganizationMemberships() throws Exception {
        final Iterable result = requestBody("direct://GETORGANIZATIONMEMBERSHIPS", null);

        assertNotNull("getOrganizationMemberships result", result);
        LOG.debug("getOrganizationMemberships: " + result);
    }

    // TODO provide parameter values for getOrganizationMembershipsForOrg
    @Ignore
    @Test
    public void testGetOrganizationMembershipsForOrg() throws Exception {
        // using long message body for single parameter "organization_id"
        final Iterable result = requestBody("direct://GETORGANIZATIONMEMBERSHIPSFORORG", 0L);

        assertNotNull("getOrganizationMembershipsForOrg result", result);
        LOG.debug("getOrganizationMembershipsForOrg: " + result);
    }

    // TODO provide parameter values for getOrganizationMembershipsForUser
    @Ignore
    @Test
    public void testGetOrganizationMembershipsForUser() throws Exception {
        // using long message body for single parameter "user_id"
        final Iterable result = requestBody("direct://GETORGANIZATIONMEMBERSHIPSFORUSER", 0L);

        assertNotNull("getOrganizationMembershipsForUser result", result);
        LOG.debug("getOrganizationMembershipsForUser: " + result);
    }

    // TODO provide parameter values for getOrganizationTickets
    @Ignore
    @Test
    public void testGetOrganizationTickets() throws Exception {
        // using long message body for single parameter "organizationId"
        final Iterable result = requestBody("direct://GETORGANIZATIONTICKETS", 0L);

        assertNotNull("getOrganizationTickets result", result);
        LOG.debug("getOrganizationTickets: " + result);
    }

    // TODO provide parameter values for getOrganizationUsers
    @Ignore
    @Test
    public void testGetOrganizationUsers() throws Exception {
        // using long message body for single parameter "id"
        final Iterable result = requestBody("direct://GETORGANIZATIONUSERS", 0L);

        assertNotNull("getOrganizationUsers result", result);
        LOG.debug("getOrganizationUsers: " + result);
    }

    @Ignore
    @Test
    public void testGetOrganizations() throws Exception {
        final Iterable result = requestBody("direct://GETORGANIZATIONS", null);

        assertNotNull("getOrganizations result", result);
        LOG.debug("getOrganizations: " + result);
    }

    // TODO provide parameter values for getOrganizationsIncrementally
    @Ignore
    @Test
    public void testGetOrganizationsIncrementally() throws Exception {
        // using java.util.Date message body for single parameter "startTime"
        final Iterable result = requestBody("direct://GETORGANIZATIONSINCREMENTALLY", null);

        assertNotNull("getOrganizationsIncrementally result", result);
        LOG.debug("getOrganizationsIncrementally: " + result);
    }

    @Ignore
    @Test
    public void testGetRecentTickets() throws Exception {
        final Iterable result = requestBody("direct://GETRECENTTICKETS", null);

        assertNotNull("getRecentTickets result", result);
        LOG.debug("getRecentTickets: " + result);
    }

    // TODO provide parameter values for getRequest
    @Ignore
    @Test
    public void testGetRequest() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.Request result = requestBody("direct://GETREQUEST", 0L);

        assertNotNull("getRequest result", result);
        LOG.debug("getRequest: " + result);
    }

    // TODO provide parameter values for getRequestComment
    @Ignore
    @Test
    public void testGetRequestComment() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.Request
        headers.put("CamelZendesk.request", null);
        // parameter type is org.zendesk.client.v2.model.Comment
        headers.put("CamelZendesk.comment", null);

        final org.zendesk.client.v2.model.Comment result = requestBodyAndHeaders("direct://GETREQUESTCOMMENT", null, headers);

        assertNotNull("getRequestComment result", result);
        LOG.debug("getRequestComment: " + result);
    }

    // TODO provide parameter values for getRequestComment
    @Ignore
    @Test
    public void testGetRequestComment_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.Request
        headers.put("CamelZendesk.request", null);
        headers.put("CamelZendesk.commentId", 0L);

        final org.zendesk.client.v2.model.Comment result = requestBodyAndHeaders("direct://GETREQUESTCOMMENT_1", null, headers);

        assertNotNull("getRequestComment result", result);
        LOG.debug("getRequestComment: " + result);
    }

    // TODO provide parameter values for getRequestComment
    @Ignore
    @Test
    public void testGetRequestComment_2() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.requestId", 0L);
        headers.put("CamelZendesk.commentId", 0L);

        final org.zendesk.client.v2.model.Comment result = requestBodyAndHeaders("direct://GETREQUESTCOMMENT_2", null, headers);

        assertNotNull("getRequestComment result", result);
        LOG.debug("getRequestComment: " + result);
    }

    // TODO provide parameter values for getRequestComments
    @Ignore
    @Test
    public void testGetRequestComments() throws Exception {
        // using long message body for single parameter "id"
        final Iterable result = requestBody("direct://GETREQUESTCOMMENTS", 0L);

        assertNotNull("getRequestComments result", result);
        LOG.debug("getRequestComments: " + result);
    }

    // TODO provide parameter values for getRequestComments
    @Ignore
    @Test
    public void testGetRequestComments_1() throws Exception {
        // using org.zendesk.client.v2.model.Request message body for single parameter "request"
        final Iterable result = requestBody("direct://GETREQUESTCOMMENTS_1", null);

        assertNotNull("getRequestComments result", result);
        LOG.debug("getRequestComments: " + result);
    }

    @Ignore
    @Test
    public void testGetRequests() throws Exception {
        final Iterable result = requestBody("direct://GETREQUESTS", null);

        assertNotNull("getRequests result", result);
        LOG.debug("getRequests: " + result);
    }

    // TODO provide parameter values for getSatisfactionRating
    @Ignore
    @Test
    public void testGetSatisfactionRating() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.SatisfactionRating result = requestBody("direct://GETSATISFACTIONRATING", 0L);

        assertNotNull("getSatisfactionRating result", result);
        LOG.debug("getSatisfactionRating: " + result);
    }

    @Ignore
    @Test
    public void testGetSatisfactionRatings() throws Exception {
        final Iterable result = requestBody("direct://GETSATISFACTIONRATINGS", null);

        assertNotNull("getSatisfactionRatings result", result);
        LOG.debug("getSatisfactionRatings: " + result);
    }

    // TODO provide parameter values for getSchedule
    @Ignore
    @Test
    public void testGetSchedule() throws Exception {
        // using org.zendesk.client.v2.model.schedules.Schedule message body for single parameter "schedule"
        final org.zendesk.client.v2.model.schedules.Schedule result = requestBody("direct://GETSCHEDULE", null);

        assertNotNull("getSchedule result", result);
        LOG.debug("getSchedule: " + result);
    }

    // TODO provide parameter values for getSchedule
    @Ignore
    @Test
    public void testGetSchedule_1() throws Exception {
        // using Long message body for single parameter "scheduleId"
        final org.zendesk.client.v2.model.schedules.Schedule result = requestBody("direct://GETSCHEDULE_1", null);

        assertNotNull("getSchedule result", result);
        LOG.debug("getSchedule: " + result);
    }

    @Ignore
    @Test
    public void testGetSchedules() throws Exception {
        final Iterable result = requestBody("direct://GETSCHEDULES", null);

        assertNotNull("getSchedules result", result);
        LOG.debug("getSchedules: " + result);
    }

    // TODO provide parameter values for getSearchResults
    @Ignore
    @Test
    public void testGetSearchResults() throws Exception {
        // using String message body for single parameter "query"
        final Iterable result = requestBody("direct://GETSEARCHRESULTS", null);

        assertNotNull("getSearchResults result", result);
        LOG.debug("getSearchResults: " + result);
    }

    // TODO provide parameter values for getSearchResults
    @Ignore
    @Test
    public void testGetSearchResults_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Class
        headers.put("CamelZendesk.type", null);
        // parameter type is String
        headers.put("CamelZendesk.query", null);

        final Iterable result = requestBodyAndHeaders("direct://GETSEARCHRESULTS_1", null, headers);

        assertNotNull("getSearchResults result", result);
        LOG.debug("getSearchResults: " + result);
    }

    // TODO provide parameter values for getSearchResults
    @Ignore
    @Test
    public void testGetSearchResults_2() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Class
        headers.put("CamelZendesk.type", null);
        // parameter type is String
        headers.put("CamelZendesk.query", null);
        // parameter type is String
        headers.put("CamelZendesk.params", null);

        final Iterable result = requestBodyAndHeaders("direct://GETSEARCHRESULTS_2", null, headers);

        assertNotNull("getSearchResults result", result);
        LOG.debug("getSearchResults: " + result);
    }

    // TODO provide parameter values for getSection
    @Ignore
    @Test
    public void testGetSection() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.hc.Section result = requestBody("direct://GETSECTION", 0L);

        assertNotNull("getSection result", result);
        LOG.debug("getSection: " + result);
    }

    // TODO provide parameter values for getSectionSubscriptions
    @Ignore
    @Test
    public void testGetSectionSubscriptions() throws Exception {
        // using Long message body for single parameter "sectionId"
        final Iterable result = requestBody("direct://GETSECTIONSUBSCRIPTIONS", null);

        assertNotNull("getSectionSubscriptions result", result);
        LOG.debug("getSectionSubscriptions: " + result);
    }

    // TODO provide parameter values for getSectionSubscriptions
    @Ignore
    @Test
    public void testGetSectionSubscriptions_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Long
        headers.put("CamelZendesk.sectionId", null);
        // parameter type is String
        headers.put("CamelZendesk.locale", null);

        final Iterable result = requestBodyAndHeaders("direct://GETSECTIONSUBSCRIPTIONS_1", null, headers);

        assertNotNull("getSectionSubscriptions result", result);
        LOG.debug("getSectionSubscriptions: " + result);
    }

    // TODO provide parameter values for getSectionTranslations
    @Ignore
    @Test
    public void testGetSectionTranslations() throws Exception {
        // using Long message body for single parameter "sectionId"
        final Iterable result = requestBody("direct://GETSECTIONTRANSLATIONS", null);

        assertNotNull("getSectionTranslations result", result);
        LOG.debug("getSectionTranslations: " + result);
    }

    @Ignore
    @Test
    public void testGetSections() throws Exception {
        final Iterable result = requestBody("direct://GETSECTIONS", null);

        assertNotNull("getSections result", result);
        LOG.debug("getSections: " + result);
    }

    // TODO provide parameter values for getSections
    @Ignore
    @Test
    public void testGetSections_1() throws Exception {
        // using org.zendesk.client.v2.model.hc.Category message body for single parameter "category"
        final Iterable result = requestBody("direct://GETSECTIONS_1", null);

        assertNotNull("getSections result", result);
        LOG.debug("getSections: " + result);
    }

    @Ignore
    @Test
    public void testGetSolvedRequests() throws Exception {
        final Iterable result = requestBody("direct://GETSOLVEDREQUESTS", null);

        assertNotNull("getSolvedRequests result", result);
        LOG.debug("getSolvedRequests: " + result);
    }

    @Ignore
    @Test
    public void testGetSuspendedTickets() throws Exception {
        final Iterable result = requestBody("direct://GETSUSPENDEDTICKETS", null);

        assertNotNull("getSuspendedTickets result", result);
        LOG.debug("getSuspendedTickets: " + result);
    }

    // TODO provide parameter values for getTarget
    @Ignore
    @Test
    public void testGetTarget() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.targets.Target result = requestBody("direct://GETTARGET", 0L);

        assertNotNull("getTarget result", result);
        LOG.debug("getTarget: " + result);
    }

    @Ignore
    @Test
    public void testGetTargets() throws Exception {
        final Iterable result = requestBody("direct://GETTARGETS", null);

        assertNotNull("getTargets result", result);
        LOG.debug("getTargets: " + result);
    }

    // TODO provide parameter values for getTicket
    @Ignore
    @Test
    public void testGetTicket() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.Ticket result = requestBody("direct://GETTICKET", 0L);

        assertNotNull("getTicket result", result);
        LOG.debug("getTicket: " + result);
    }

    // TODO provide parameter values for getTicketAudit
    @Ignore
    @Test
    public void testGetTicketAudit() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.Ticket
        headers.put("CamelZendesk.ticket", null);
        // parameter type is org.zendesk.client.v2.model.Audit
        headers.put("CamelZendesk.audit", null);

        final org.zendesk.client.v2.model.Audit result = requestBodyAndHeaders("direct://GETTICKETAUDIT", null, headers);

        assertNotNull("getTicketAudit result", result);
        LOG.debug("getTicketAudit: " + result);
    }

    // TODO provide parameter values for getTicketAudit
    @Ignore
    @Test
    public void testGetTicketAudit_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.Ticket
        headers.put("CamelZendesk.ticket", null);
        headers.put("CamelZendesk.id", 0L);

        final org.zendesk.client.v2.model.Audit result = requestBodyAndHeaders("direct://GETTICKETAUDIT_1", null, headers);

        assertNotNull("getTicketAudit result", result);
        LOG.debug("getTicketAudit: " + result);
    }

    // TODO provide parameter values for getTicketAudit
    @Ignore
    @Test
    public void testGetTicketAudit_2() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.ticketId", 0L);
        headers.put("CamelZendesk.auditId", 0L);

        final org.zendesk.client.v2.model.Audit result = requestBodyAndHeaders("direct://GETTICKETAUDIT_2", null, headers);

        assertNotNull("getTicketAudit result", result);
        LOG.debug("getTicketAudit: " + result);
    }

    // TODO provide parameter values for getTicketAudits
    @Ignore
    @Test
    public void testGetTicketAudits() throws Exception {
        // using org.zendesk.client.v2.model.Ticket message body for single parameter "ticket"
        final Iterable result = requestBody("direct://GETTICKETAUDITS", null);

        assertNotNull("getTicketAudits result", result);
        LOG.debug("getTicketAudits: " + result);
    }

    // TODO provide parameter values for getTicketAudits
    @Ignore
    @Test
    public void testGetTicketAudits_1() throws Exception {
        // using Long message body for single parameter "ticketId0"
        final Iterable result = requestBody("direct://GETTICKETAUDITS_1", null);

        assertNotNull("getTicketAudits result", result);
        LOG.debug("getTicketAudits: " + result);
    }

    // TODO provide parameter values for getTicketCollaborators
    @Ignore
    @Test
    public void testGetTicketCollaborators() throws Exception {
        // using long message body for single parameter "id"
        final java.util.List result = requestBody("direct://GETTICKETCOLLABORATORS", 0L);

        assertNotNull("getTicketCollaborators result", result);
        LOG.debug("getTicketCollaborators: " + result);
    }

    // TODO provide parameter values for getTicketComments
    @Ignore
    @Test
    public void testGetTicketComments() throws Exception {
        // using long message body for single parameter "id"
        final Iterable result = requestBody("direct://GETTICKETCOMMENTS", 0L);

        assertNotNull("getTicketComments result", result);
        LOG.debug("getTicketComments: " + result);
    }

    // TODO provide parameter values for getTicketField
    @Ignore
    @Test
    public void testGetTicketField() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.Field result = requestBody("direct://GETTICKETFIELD", 0L);

        assertNotNull("getTicketField result", result);
        LOG.debug("getTicketField: " + result);
    }

    @Ignore
    @Test
    public void testGetTicketFields() throws Exception {
        final java.util.List result = requestBody("direct://GETTICKETFIELDS", null);

        assertNotNull("getTicketFields result", result);
        LOG.debug("getTicketFields: " + result);
    }

    // TODO provide parameter values for getTicketForm
    @Ignore
    @Test
    public void testGetTicketForm() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.TicketForm result = requestBody("direct://GETTICKETFORM", 0L);

        assertNotNull("getTicketForm result", result);
        LOG.debug("getTicketForm: " + result);
    }

    @Ignore
    @Test
    public void testGetTicketForms() throws Exception {
        final java.util.List result = requestBody("direct://GETTICKETFORMS", null);

        assertNotNull("getTicketForms result", result);
        LOG.debug("getTicketForms: " + result);
    }

    // TODO provide parameter values for getTicketIncidents
    @Ignore
    @Test
    public void testGetTicketIncidents() throws Exception {
        // using long message body for single parameter "id"
        final java.util.List result = requestBody("direct://GETTICKETINCIDENTS", 0L);

        assertNotNull("getTicketIncidents result", result);
        LOG.debug("getTicketIncidents: " + result);
    }

    // TODO provide parameter values for getTicketMetric
    @Ignore
    @Test
    public void testGetTicketMetric() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.Metric result = requestBody("direct://GETTICKETMETRIC", 0L);

        assertNotNull("getTicketMetric result", result);
        LOG.debug("getTicketMetric: " + result);
    }

    // TODO provide parameter values for getTicketMetricByTicket
    @Ignore
    @Test
    public void testGetTicketMetricByTicket() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.Metric result = requestBody("direct://GETTICKETMETRICBYTICKET", 0L);

        assertNotNull("getTicketMetricByTicket result", result);
        LOG.debug("getTicketMetricByTicket: " + result);
    }

    @Ignore
    @Test
    public void testGetTicketMetrics() throws Exception {
        final Iterable result = requestBody("direct://GETTICKETMETRICS", null);

        assertNotNull("getTicketMetrics result", result);
        LOG.debug("getTicketMetrics: " + result);
    }

    @Ignore
    @Test
    public void testGetTickets() throws Exception {
        final Iterable result = requestBody("direct://GETTICKETS", null);

        assertNotNull("getTickets result", result);
        LOG.debug("getTickets: " + result);
    }

    // TODO provide parameter values for getTickets
    @Ignore
    @Test
    public void testGetTickets_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.id", 0L);
        // parameter type is long[]
        headers.put("CamelZendesk.ids", null);

        final java.util.List result = requestBodyAndHeaders("direct://GETTICKETS_1", null, headers);

        assertNotNull("getTickets result", result);
        LOG.debug("getTickets: " + result);
    }

    // TODO provide parameter values for getTicketsByExternalId
    @Ignore
    @Test
    public void testGetTicketsByExternalId() throws Exception {
        // using String message body for single parameter "externalId"
        final Iterable result = requestBody("direct://GETTICKETSBYEXTERNALID", null);

        assertNotNull("getTicketsByExternalId result", result);
        LOG.debug("getTicketsByExternalId: " + result);
    }

    // TODO provide parameter values for getTicketsByExternalId
    @Ignore
    @Test
    public void testGetTicketsByExternalId_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is String
        headers.put("CamelZendesk.externalId", null);
        headers.put("CamelZendesk.includeArchived", Boolean.FALSE);

        final Iterable result = requestBodyAndHeaders("direct://GETTICKETSBYEXTERNALID_1", null, headers);

        assertNotNull("getTicketsByExternalId result", result);
        LOG.debug("getTicketsByExternalId: " + result);
    }

    // TODO provide parameter values for getTicketsFromSearch
    @Ignore
    @Test
    public void testGetTicketsFromSearch() throws Exception {
        // using String message body for single parameter "searchTerm"
        final Iterable result = requestBody("direct://GETTICKETSFROMSEARCH", null);

        assertNotNull("getTicketsFromSearch result", result);
        LOG.debug("getTicketsFromSearch: " + result);
    }

    // TODO provide parameter values for getTicketsIncrementally
    @Ignore
    @Test
    public void testGetTicketsIncrementally() throws Exception {
        // using java.util.Date message body for single parameter "startTime"
        final Iterable result = requestBody("direct://GETTICKETSINCREMENTALLY", null);

        assertNotNull("getTicketsIncrementally result", result);
        LOG.debug("getTicketsIncrementally: " + result);
    }

    // TODO provide parameter values for getTicketsIncrementally
    @Ignore
    @Test
    public void testGetTicketsIncrementally_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is java.util.Date
        headers.put("CamelZendesk.startTime", null);
        // parameter type is java.util.Date
        headers.put("CamelZendesk.endTime", null);

        final Iterable result = requestBodyAndHeaders("direct://GETTICKETSINCREMENTALLY_1", null, headers);

        assertNotNull("getTicketsIncrementally result", result);
        LOG.debug("getTicketsIncrementally: " + result);
    }

    // TODO provide parameter values for getTopic
    @Ignore
    @Test
    public void testGetTopic() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.Topic result = requestBody("direct://GETTOPIC", 0L);

        assertNotNull("getTopic result", result);
        LOG.debug("getTopic: " + result);
    }

    @Ignore
    @Test
    public void testGetTopics() throws Exception {
        final Iterable result = requestBody("direct://GETTOPICS", null);

        assertNotNull("getTopics result", result);
        LOG.debug("getTopics: " + result);
    }

    // TODO provide parameter values for getTopics
    @Ignore
    @Test
    public void testGetTopics_1() throws Exception {
        // using long message body for single parameter "forum_id"
        final java.util.List result = requestBody("direct://GETTOPICS_1", 0L);

        assertNotNull("getTopics result", result);
        LOG.debug("getTopics: " + result);
    }

    // TODO provide parameter values for getTopics
    @Ignore
    @Test
    public void testGetTopics_2() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.id", 0L);
        // parameter type is long[]
        headers.put("CamelZendesk.ids", null);

        final java.util.List result = requestBodyAndHeaders("direct://GETTOPICS_2", null, headers);

        assertNotNull("getTopics result", result);
        LOG.debug("getTopics: " + result);
    }

    // TODO provide parameter values for getTopicsByUser
    @Ignore
    @Test
    public void testGetTopicsByUser() throws Exception {
        // using long message body for single parameter "user_id"
        final java.util.List result = requestBody("direct://GETTOPICSBYUSER", 0L);

        assertNotNull("getTopicsByUser result", result);
        LOG.debug("getTopicsByUser: " + result);
    }

    // TODO provide parameter values for getTrigger
    @Ignore
    @Test
    public void testGetTrigger() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.Trigger result = requestBody("direct://GETTRIGGER", 0L);

        assertNotNull("getTrigger result", result);
        LOG.debug("getTrigger: " + result);
    }

    @Ignore
    @Test
    public void testGetTriggers() throws Exception {
        final Iterable result = requestBody("direct://GETTRIGGERS", null);

        assertNotNull("getTriggers result", result);
        LOG.debug("getTriggers: " + result);
    }

    @Ignore
    @Test
    public void testGetTwitterMonitors() throws Exception {
        final Iterable result = requestBody("direct://GETTWITTERMONITORS", null);

        assertNotNull("getTwitterMonitors result", result);
        LOG.debug("getTwitterMonitors: " + result);
    }

    // TODO provide parameter values for getUser
    @Ignore
    @Test
    public void testGetUser() throws Exception {
        // using long message body for single parameter "id"
        final org.zendesk.client.v2.model.User result = requestBody("direct://GETUSER", 0L);

        assertNotNull("getUser result", result);
        LOG.debug("getUser: " + result);
    }

    // TODO provide parameter values for getUserCCDTickets
    @Ignore
    @Test
    public void testGetUserCCDTickets() throws Exception {
        // using long message body for single parameter "userId"
        final Iterable result = requestBody("direct://GETUSERCCDTICKETS", 0L);

        assertNotNull("getUserCCDTickets result", result);
        LOG.debug("getUserCCDTickets: " + result);
    }

    @Ignore
    @Test
    public void testGetUserFields() throws Exception {
        final Iterable result = requestBody("direct://GETUSERFIELDS", null);

        assertNotNull("getUserFields result", result);
        LOG.debug("getUserFields: " + result);
    }

    // TODO provide parameter values for getUserIdentities
    @Ignore
    @Test
    public void testGetUserIdentities() throws Exception {
        // using org.zendesk.client.v2.model.User message body for single parameter "user"
        final java.util.List result = requestBody("direct://GETUSERIDENTITIES", null);

        assertNotNull("getUserIdentities result", result);
        LOG.debug("getUserIdentities: " + result);
    }

    // TODO provide parameter values for getUserIdentities
    @Ignore
    @Test
    public void testGetUserIdentities_1() throws Exception {
        // using long message body for single parameter "userId"
        final java.util.List result = requestBody("direct://GETUSERIDENTITIES_1", 0L);

        assertNotNull("getUserIdentities result", result);
        LOG.debug("getUserIdentities: " + result);
    }

    // TODO provide parameter values for getUserIdentity
    @Ignore
    @Test
    public void testGetUserIdentity() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.User
        headers.put("CamelZendesk.user", null);
        // parameter type is org.zendesk.client.v2.model.Identity
        headers.put("CamelZendesk.identity", null);

        final org.zendesk.client.v2.model.Identity result = requestBodyAndHeaders("direct://GETUSERIDENTITY", null, headers);

        assertNotNull("getUserIdentity result", result);
        LOG.debug("getUserIdentity: " + result);
    }

    // TODO provide parameter values for getUserIdentity
    @Ignore
    @Test
    public void testGetUserIdentity_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.User
        headers.put("CamelZendesk.user", null);
        headers.put("CamelZendesk.identityId", 0L);

        final org.zendesk.client.v2.model.Identity result = requestBodyAndHeaders("direct://GETUSERIDENTITY_1", null, headers);

        assertNotNull("getUserIdentity result", result);
        LOG.debug("getUserIdentity: " + result);
    }

    // TODO provide parameter values for getUserIdentity
    @Ignore
    @Test
    public void testGetUserIdentity_2() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.userId", 0L);
        headers.put("CamelZendesk.identityId", 0L);

        final org.zendesk.client.v2.model.Identity result = requestBodyAndHeaders("direct://GETUSERIDENTITY_2", null, headers);

        assertNotNull("getUserIdentity result", result);
        LOG.debug("getUserIdentity: " + result);
    }

    // TODO provide parameter values for getUserRequestedTickets
    @Ignore
    @Test
    public void testGetUserRequestedTickets() throws Exception {
        // using long message body for single parameter "userId"
        final Iterable result = requestBody("direct://GETUSERREQUESTEDTICKETS", 0L);

        assertNotNull("getUserRequestedTickets result", result);
        LOG.debug("getUserRequestedTickets: " + result);
    }

    // TODO provide parameter values for getUserRequests
    @Ignore
    @Test
    public void testGetUserRequests() throws Exception {
        // using long message body for single parameter "id"
        final Iterable result = requestBody("direct://GETUSERREQUESTS", 0L);

        assertNotNull("getUserRequests result", result);
        LOG.debug("getUserRequests: " + result);
    }

    // TODO provide parameter values for getUserRequests
    @Ignore
    @Test
    public void testGetUserRequests_1() throws Exception {
        // using org.zendesk.client.v2.model.User message body for single parameter "user"
        final Iterable result = requestBody("direct://GETUSERREQUESTS_1", null);

        assertNotNull("getUserRequests result", result);
        LOG.debug("getUserRequests: " + result);
    }

    // TODO provide parameter values for getUserSubscriptions
    @Ignore
    @Test
    public void testGetUserSubscriptions() throws Exception {
        // using org.zendesk.client.v2.model.User message body for single parameter "user"
        final Iterable result = requestBody("direct://GETUSERSUBSCRIPTIONS", null);

        assertNotNull("getUserSubscriptions result", result);
        LOG.debug("getUserSubscriptions: " + result);
    }

    // TODO provide parameter values for getUserSubscriptions
    @Ignore
    @Test
    public void testGetUserSubscriptions_1() throws Exception {
        // using Long message body for single parameter "userId0"
        final Iterable result = requestBody("direct://GETUSERSUBSCRIPTIONS_1", null);

        assertNotNull("getUserSubscriptions result", result);
        LOG.debug("getUserSubscriptions: " + result);
    }

    @Ignore
    @Test
    public void testGetUsers() throws Exception {
        final Iterable result = requestBody("direct://GETUSERS", null);

        assertNotNull("getUsers result", result);
        LOG.debug("getUsers: " + result);
    }

    // TODO provide parameter values for getUsersByRole
    @Ignore
    @Test
    public void testGetUsersByRole() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is String
        headers.put("CamelZendesk.role", null);
        // parameter type is String[]
        headers.put("CamelZendesk.roles", null);

        final Iterable result = requestBodyAndHeaders("direct://GETUSERSBYROLE", null, headers);

        assertNotNull("getUsersByRole result", result);
        LOG.debug("getUsersByRole: " + result);
    }

    // TODO provide parameter values for getUsersIncrementally
    @Ignore
    @Test
    public void testGetUsersIncrementally() throws Exception {
        // using java.util.Date message body for single parameter "startTime"
        final Iterable result = requestBody("direct://GETUSERSINCREMENTALLY", null);

        assertNotNull("getUsersIncrementally result", result);
        LOG.debug("getUsersIncrementally: " + result);
    }

    // TODO provide parameter values for importTopic
    @Ignore
    @Test
    public void testImportTopic() throws Exception {
        // using org.zendesk.client.v2.model.Topic message body for single parameter "topic"
        final org.zendesk.client.v2.model.Topic result = requestBody("direct://IMPORTTOPIC", null);

        assertNotNull("importTopic result", result);
        LOG.debug("importTopic: " + result);
    }

    // TODO provide parameter values for lookupOrganizationsByExternalId
    @Ignore
    @Test
    public void testLookupOrganizationsByExternalId() throws Exception {
        // using String message body for single parameter "externalId"
        final Iterable result = requestBody("direct://LOOKUPORGANIZATIONSBYEXTERNALID", null);

        assertNotNull("lookupOrganizationsByExternalId result", result);
        LOG.debug("lookupOrganizationsByExternalId: " + result);
    }

    // TODO provide parameter values for lookupUserByEmail
    @Ignore
    @Test
    public void testLookupUserByEmail() throws Exception {
        // using String message body for single parameter "email"
        final Iterable result = requestBody("direct://LOOKUPUSERBYEMAIL", null);

        assertNotNull("lookupUserByEmail result", result);
        LOG.debug("lookupUserByEmail: " + result);
    }

    // TODO provide parameter values for lookupUserByExternalId
    @Ignore
    @Test
    public void testLookupUserByExternalId() throws Exception {
        // using String message body for single parameter "externalId"
        final Iterable result = requestBody("direct://LOOKUPUSERBYEXTERNALID", null);

        assertNotNull("lookupUserByExternalId result", result);
        LOG.debug("lookupUserByExternalId: " + result);
    }

    // TODO provide parameter values for macrosShowChangesToTicket
    @Ignore
    @Test
    public void testMacrosShowChangesToTicket() throws Exception {
        // using long message body for single parameter "macroId"
        final org.zendesk.client.v2.model.Ticket result = requestBody("direct://MACROSSHOWCHANGESTOTICKET", 0L);

        assertNotNull("macrosShowChangesToTicket result", result);
        LOG.debug("macrosShowChangesToTicket: " + result);
    }

    // TODO provide parameter values for macrosShowTicketAfterChanges
    @Ignore
    @Test
    public void testMacrosShowTicketAfterChanges() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.ticketId", 0L);
        headers.put("CamelZendesk.macroId", 0L);

        final org.zendesk.client.v2.model.Ticket result = requestBodyAndHeaders("direct://MACROSSHOWTICKETAFTERCHANGES", null, headers);

        assertNotNull("macrosShowTicketAfterChanges result", result);
        LOG.debug("macrosShowTicketAfterChanges: " + result);
    }

    // TODO provide parameter values for makePrivateTicketAudit
    @Ignore
    @Test
    public void testMakePrivateTicketAudit() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.Ticket
        headers.put("CamelZendesk.ticket", null);
        // parameter type is org.zendesk.client.v2.model.Audit
        headers.put("CamelZendesk.audit", null);

        requestBodyAndHeaders("direct://MAKEPRIVATETICKETAUDIT", null, headers);
    }

    // TODO provide parameter values for makePrivateTicketAudit
    @Ignore
    @Test
    public void testMakePrivateTicketAudit_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.Ticket
        headers.put("CamelZendesk.ticket", null);
        headers.put("CamelZendesk.id", 0L);

        requestBodyAndHeaders("direct://MAKEPRIVATETICKETAUDIT_1", null, headers);
    }

    // TODO provide parameter values for makePrivateTicketAudit
    @Ignore
    @Test
    public void testMakePrivateTicketAudit_2() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.ticketId", 0L);
        headers.put("CamelZendesk.auditId", 0L);

        requestBodyAndHeaders("direct://MAKEPRIVATETICKETAUDIT_2", null, headers);
    }

    // TODO provide parameter values for markTicketAsSpam
    @Ignore
    @Test
    public void testMarkTicketAsSpam() throws Exception {
        // using long message body for single parameter "id"
        requestBody("direct://MARKTICKETASSPAM", 0L);
    }

    // TODO provide parameter values for markTicketAsSpam
    @Ignore
    @Test
    public void testMarkTicketAsSpam_1() throws Exception {
        // using org.zendesk.client.v2.model.Ticket message body for single parameter "ticket"
        requestBody("direct://MARKTICKETASSPAM_1", null);
    }

    // TODO provide parameter values for notifyApp
    @Ignore
    @Test
    public void testNotifyApp() throws Exception {
        // using String message body for single parameter "json"
        requestBody("direct://NOTIFYAPP", null);
    }

    // TODO provide parameter values for removeTagFromOrganisations
    @Ignore
    @Test
    public void testRemoveTagFromOrganisations() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.id", 0L);
        // parameter type is String[]
        headers.put("CamelZendesk.tags", null);

        final java.util.List result = requestBodyAndHeaders("direct://REMOVETAGFROMORGANISATIONS", null, headers);

        assertNotNull("removeTagFromOrganisations result", result);
        LOG.debug("removeTagFromOrganisations: " + result);
    }

    // TODO provide parameter values for removeTagFromTicket
    @Ignore
    @Test
    public void testRemoveTagFromTicket() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.id", 0L);
        // parameter type is String[]
        headers.put("CamelZendesk.tags", null);

        final java.util.List result = requestBodyAndHeaders("direct://REMOVETAGFROMTICKET", null, headers);

        assertNotNull("removeTagFromTicket result", result);
        LOG.debug("removeTagFromTicket: " + result);
    }

    // TODO provide parameter values for removeTagFromTopics
    @Ignore
    @Test
    public void testRemoveTagFromTopics() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.id", 0L);
        // parameter type is String[]
        headers.put("CamelZendesk.tags", null);

        final java.util.List result = requestBodyAndHeaders("direct://REMOVETAGFROMTOPICS", null, headers);

        assertNotNull("removeTagFromTopics result", result);
        LOG.debug("removeTagFromTopics: " + result);
    }

    // TODO provide parameter values for requestVerifyUserIdentity
    @Ignore
    @Test
    public void testRequestVerifyUserIdentity() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.User
        headers.put("CamelZendesk.user", null);
        // parameter type is org.zendesk.client.v2.model.Identity
        headers.put("CamelZendesk.identity", null);

        final org.zendesk.client.v2.model.Identity result = requestBodyAndHeaders("direct://REQUESTVERIFYUSERIDENTITY", null, headers);

        assertNotNull("requestVerifyUserIdentity result", result);
        LOG.debug("requestVerifyUserIdentity: " + result);
    }

    // TODO provide parameter values for requestVerifyUserIdentity
    @Ignore
    @Test
    public void testRequestVerifyUserIdentity_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.User
        headers.put("CamelZendesk.user", null);
        headers.put("CamelZendesk.identityId", 0L);

        final org.zendesk.client.v2.model.Identity result = requestBodyAndHeaders("direct://REQUESTVERIFYUSERIDENTITY_1", null, headers);

        assertNotNull("requestVerifyUserIdentity result", result);
        LOG.debug("requestVerifyUserIdentity: " + result);
    }

    // TODO provide parameter values for requestVerifyUserIdentity
    @Ignore
    @Test
    public void testRequestVerifyUserIdentity_2() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.userId", 0L);
        headers.put("CamelZendesk.identityId", 0L);

        final org.zendesk.client.v2.model.Identity result = requestBodyAndHeaders("direct://REQUESTVERIFYUSERIDENTITY_2", null, headers);

        assertNotNull("requestVerifyUserIdentity result", result);
        LOG.debug("requestVerifyUserIdentity: " + result);
    }

    // TODO provide parameter values for resetUserPassword
    @Ignore
    @Test
    public void testResetUserPassword() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.id", 0L);
        // parameter type is String
        headers.put("CamelZendesk.password", null);

        requestBodyAndHeaders("direct://RESETUSERPASSWORD", null, headers);
    }

    // TODO provide parameter values for resetUserPassword
    @Ignore
    @Test
    public void testResetUserPassword_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.User
        headers.put("CamelZendesk.user", null);
        // parameter type is String
        headers.put("CamelZendesk.password", null);

        requestBodyAndHeaders("direct://RESETUSERPASSWORD_1", null, headers);
    }

    // TODO provide parameter values for setGroupMembershipAsDefault
    @Ignore
    @Test
    public void testSetGroupMembershipAsDefault() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.user_id", 0L);
        // parameter type is org.zendesk.client.v2.model.GroupMembership
        headers.put("CamelZendesk.groupMembership", null);

        final java.util.List result = requestBodyAndHeaders("direct://SETGROUPMEMBERSHIPASDEFAULT", null, headers);

        assertNotNull("setGroupMembershipAsDefault result", result);
        LOG.debug("setGroupMembershipAsDefault: " + result);
    }

    // TODO provide parameter values for setOrganizationMembershipAsDefault
    @Ignore
    @Test
    public void testSetOrganizationMembershipAsDefault() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.user_id", 0L);
        // parameter type is org.zendesk.client.v2.model.OrganizationMembership
        headers.put("CamelZendesk.organizationMembership", null);

        final java.util.List result = requestBodyAndHeaders("direct://SETORGANIZATIONMEMBERSHIPASDEFAULT", null, headers);

        assertNotNull("setOrganizationMembershipAsDefault result", result);
        LOG.debug("setOrganizationMembershipAsDefault: " + result);
    }

    // TODO provide parameter values for setTagOnOrganisations
    @Ignore
    @Test
    public void testSetTagOnOrganisations() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.id", 0L);
        // parameter type is String[]
        headers.put("CamelZendesk.tags", null);

        final java.util.List result = requestBodyAndHeaders("direct://SETTAGONORGANISATIONS", null, headers);

        assertNotNull("setTagOnOrganisations result", result);
        LOG.debug("setTagOnOrganisations: " + result);
    }

    // TODO provide parameter values for setTagOnTicket
    @Ignore
    @Test
    public void testSetTagOnTicket() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.id", 0L);
        // parameter type is String[]
        headers.put("CamelZendesk.tags", null);

        final java.util.List result = requestBodyAndHeaders("direct://SETTAGONTICKET", null, headers);

        assertNotNull("setTagOnTicket result", result);
        LOG.debug("setTagOnTicket: " + result);
    }

    // TODO provide parameter values for setTagOnTopics
    @Ignore
    @Test
    public void testSetTagOnTopics() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.id", 0L);
        // parameter type is String[]
        headers.put("CamelZendesk.tags", null);

        final java.util.List result = requestBodyAndHeaders("direct://SETTAGONTOPICS", null, headers);

        assertNotNull("setTagOnTopics result", result);
        LOG.debug("setTagOnTopics: " + result);
    }

    // TODO provide parameter values for setUserPrimaryIdentity
    @Ignore
    @Test
    public void testSetUserPrimaryIdentity() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.User
        headers.put("CamelZendesk.user", null);
        // parameter type is org.zendesk.client.v2.model.Identity
        headers.put("CamelZendesk.identity", null);

        final java.util.List result = requestBodyAndHeaders("direct://SETUSERPRIMARYIDENTITY", null, headers);

        assertNotNull("setUserPrimaryIdentity result", result);
        LOG.debug("setUserPrimaryIdentity: " + result);
    }

    // TODO provide parameter values for setUserPrimaryIdentity
    @Ignore
    @Test
    public void testSetUserPrimaryIdentity_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.User
        headers.put("CamelZendesk.user", null);
        headers.put("CamelZendesk.identityId", 0L);

        final java.util.List result = requestBodyAndHeaders("direct://SETUSERPRIMARYIDENTITY_1", null, headers);

        assertNotNull("setUserPrimaryIdentity result", result);
        LOG.debug("setUserPrimaryIdentity: " + result);
    }

    // TODO provide parameter values for setUserPrimaryIdentity
    @Ignore
    @Test
    public void testSetUserPrimaryIdentity_2() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.userId", 0L);
        headers.put("CamelZendesk.identityId", 0L);

        final java.util.List result = requestBodyAndHeaders("direct://SETUSERPRIMARYIDENTITY_2", null, headers);

        assertNotNull("setUserPrimaryIdentity result", result);
        LOG.debug("setUserPrimaryIdentity: " + result);
    }

    // TODO provide parameter values for trustTicketAudit
    @Ignore
    @Test
    public void testTrustTicketAudit() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.Ticket
        headers.put("CamelZendesk.ticket", null);
        // parameter type is org.zendesk.client.v2.model.Audit
        headers.put("CamelZendesk.audit", null);

        requestBodyAndHeaders("direct://TRUSTTICKETAUDIT", null, headers);
    }

    // TODO provide parameter values for trustTicketAudit
    @Ignore
    @Test
    public void testTrustTicketAudit_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.Ticket
        headers.put("CamelZendesk.ticket", null);
        headers.put("CamelZendesk.id", 0L);

        requestBodyAndHeaders("direct://TRUSTTICKETAUDIT_1", null, headers);
    }

    // TODO provide parameter values for trustTicketAudit
    @Ignore
    @Test
    public void testTrustTicketAudit_2() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.ticketId", 0L);
        headers.put("CamelZendesk.auditId", 0L);

        requestBodyAndHeaders("direct://TRUSTTICKETAUDIT_2", null, headers);
    }

    // TODO provide parameter values for updateArticle
    @Ignore
    @Test
    public void testUpdateArticle() throws Exception {
        // using org.zendesk.client.v2.model.hc.Article message body for single parameter "article"
        final org.zendesk.client.v2.model.hc.Article result = requestBody("direct://UPDATEARTICLE", null);

        assertNotNull("updateArticle result", result);
        LOG.debug("updateArticle: " + result);
    }

    // TODO provide parameter values for updateArticleTranslation
    @Ignore
    @Test
    public void testUpdateArticleTranslation() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Long
        headers.put("CamelZendesk.articleId", null);
        // parameter type is String
        headers.put("CamelZendesk.locale", null);
        // parameter type is org.zendesk.client.v2.model.hc.Translation
        headers.put("CamelZendesk.translation", null);

        final org.zendesk.client.v2.model.hc.Translation result = requestBodyAndHeaders("direct://UPDATEARTICLETRANSLATION", null, headers);

        assertNotNull("updateArticleTranslation result", result);
        LOG.debug("updateArticleTranslation: " + result);
    }

    // TODO provide parameter values for updateAutomation
    @Ignore
    @Test
    public void testUpdateAutomation() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Long
        headers.put("CamelZendesk.automationId", null);
        // parameter type is org.zendesk.client.v2.model.Automation
        headers.put("CamelZendesk.automation", null);

        final org.zendesk.client.v2.model.Automation result = requestBodyAndHeaders("direct://UPDATEAUTOMATION", null, headers);

        assertNotNull("updateAutomation result", result);
        LOG.debug("updateAutomation: " + result);
    }

    // TODO provide parameter values for updateCategory
    @Ignore
    @Test
    public void testUpdateCategory() throws Exception {
        // using org.zendesk.client.v2.model.hc.Category message body for single parameter "category"
        final org.zendesk.client.v2.model.hc.Category result = requestBody("direct://UPDATECATEGORY", null);

        assertNotNull("updateCategory result", result);
        LOG.debug("updateCategory: " + result);
    }

    // TODO provide parameter values for updateCategoryTranslation
    @Ignore
    @Test
    public void testUpdateCategoryTranslation() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Long
        headers.put("CamelZendesk.categoryId", null);
        // parameter type is String
        headers.put("CamelZendesk.locale", null);
        // parameter type is org.zendesk.client.v2.model.hc.Translation
        headers.put("CamelZendesk.translation", null);

        final org.zendesk.client.v2.model.hc.Translation result = requestBodyAndHeaders("direct://UPDATECATEGORYTRANSLATION", null, headers);

        assertNotNull("updateCategoryTranslation result", result);
        LOG.debug("updateCategoryTranslation: " + result);
    }

    // TODO provide parameter values for updateForum
    @Ignore
    @Test
    public void testUpdateForum() throws Exception {
        // using org.zendesk.client.v2.model.Forum message body for single parameter "forum"
        final org.zendesk.client.v2.model.Forum result = requestBody("direct://UPDATEFORUM", null);

        assertNotNull("updateForum result", result);
        LOG.debug("updateForum: " + result);
    }

    // TODO provide parameter values for updateGroup
    @Ignore
    @Test
    public void testUpdateGroup() throws Exception {
        // using org.zendesk.client.v2.model.Group message body for single parameter "group"
        final org.zendesk.client.v2.model.Group result = requestBody("direct://UPDATEGROUP", null);

        assertNotNull("updateGroup result", result);
        LOG.debug("updateGroup: " + result);
    }

    // TODO provide parameter values for updateInstallation
    @Ignore
    @Test
    public void testUpdateInstallation() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.installationId", 0);
        // parameter type is String
        headers.put("CamelZendesk.json", null);

        requestBodyAndHeaders("direct://UPDATEINSTALLATION", null, headers);
    }

    // TODO provide parameter values for updateMacro
    @Ignore
    @Test
    public void testUpdateMacro() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Long
        headers.put("CamelZendesk.macroId0", null);
        // parameter type is org.zendesk.client.v2.model.Macro
        headers.put("CamelZendesk.macro", null);

        final org.zendesk.client.v2.model.Macro result = requestBodyAndHeaders("direct://UPDATEMACRO", null, headers);

        assertNotNull("updateMacro result", result);
        LOG.debug("updateMacro: " + result);
    }

    // TODO provide parameter values for updateOrganization
    @Ignore
    @Test
    public void testUpdateOrganization() throws Exception {
        // using org.zendesk.client.v2.model.Organization message body for single parameter "organization"
        final org.zendesk.client.v2.model.Organization result = requestBody("direct://UPDATEORGANIZATION", null);

        assertNotNull("updateOrganization result", result);
        LOG.debug("updateOrganization: " + result);
    }

    // TODO provide parameter values for updateRequest
    @Ignore
    @Test
    public void testUpdateRequest() throws Exception {
        // using org.zendesk.client.v2.model.Request message body for single parameter "request"
        final org.zendesk.client.v2.model.Request result = requestBody("direct://UPDATEREQUEST", null);

        assertNotNull("updateRequest result", result);
        LOG.debug("updateRequest: " + result);
    }

    // TODO provide parameter values for updateSection
    @Ignore
    @Test
    public void testUpdateSection() throws Exception {
        // using org.zendesk.client.v2.model.hc.Section message body for single parameter "section"
        final org.zendesk.client.v2.model.hc.Section result = requestBody("direct://UPDATESECTION", null);

        assertNotNull("updateSection result", result);
        LOG.debug("updateSection: " + result);
    }

    // TODO provide parameter values for updateSectionTranslation
    @Ignore
    @Test
    public void testUpdateSectionTranslation() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Long
        headers.put("CamelZendesk.sectionId", null);
        // parameter type is String
        headers.put("CamelZendesk.locale", null);
        // parameter type is org.zendesk.client.v2.model.hc.Translation
        headers.put("CamelZendesk.translation", null);

        final org.zendesk.client.v2.model.hc.Translation result = requestBodyAndHeaders("direct://UPDATESECTIONTRANSLATION", null, headers);

        assertNotNull("updateSectionTranslation result", result);
        LOG.debug("updateSectionTranslation: " + result);
    }

    // TODO provide parameter values for updateTicket
    @Ignore
    @Test
    public void testUpdateTicket() throws Exception {
        // using org.zendesk.client.v2.model.Ticket message body for single parameter "ticket"
        final org.zendesk.client.v2.model.Ticket result = requestBody("direct://UPDATETICKET", null);

        assertNotNull("updateTicket result", result);
        LOG.debug("updateTicket: " + result);
    }

    // TODO provide parameter values for updateTicketField
    @Ignore
    @Test
    public void testUpdateTicketField() throws Exception {
        // using org.zendesk.client.v2.model.Field message body for single parameter "field"
        final org.zendesk.client.v2.model.Field result = requestBody("direct://UPDATETICKETFIELD", null);

        assertNotNull("updateTicketField result", result);
        LOG.debug("updateTicketField: " + result);
    }

    // TODO provide parameter values for updateTopic
    @Ignore
    @Test
    public void testUpdateTopic() throws Exception {
        // using org.zendesk.client.v2.model.Topic message body for single parameter "topic"
        final org.zendesk.client.v2.model.Topic result = requestBody("direct://UPDATETOPIC", null);

        assertNotNull("updateTopic result", result);
        LOG.debug("updateTopic: " + result);
    }

    // TODO provide parameter values for updateTrigger
    @Ignore
    @Test
    public void testUpdateTrigger() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is Long
        headers.put("CamelZendesk.triggerId0", null);
        // parameter type is org.zendesk.client.v2.model.Trigger
        headers.put("CamelZendesk.trigger", null);

        final org.zendesk.client.v2.model.Trigger result = requestBodyAndHeaders("direct://UPDATETRIGGER", null, headers);

        assertNotNull("updateTrigger result", result);
        LOG.debug("updateTrigger: " + result);
    }

    // TODO provide parameter values for updateUser
    @Ignore
    @Test
    public void testUpdateUser() throws Exception {
        // using org.zendesk.client.v2.model.User message body for single parameter "user"
        final org.zendesk.client.v2.model.User result = requestBody("direct://UPDATEUSER", null);

        assertNotNull("updateUser result", result);
        LOG.debug("updateUser: " + result);
    }

    // TODO provide parameter values for updateUserIdentity
    @Ignore
    @Test
    public void testUpdateUserIdentity() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.User
        headers.put("CamelZendesk.user", null);
        // parameter type is org.zendesk.client.v2.model.Identity
        headers.put("CamelZendesk.identity", null);

        final org.zendesk.client.v2.model.Identity result = requestBodyAndHeaders("direct://UPDATEUSERIDENTITY", null, headers);

        assertNotNull("updateUserIdentity result", result);
        LOG.debug("updateUserIdentity: " + result);
    }

    // TODO provide parameter values for updateUserIdentity
    @Ignore
    @Test
    public void testUpdateUserIdentity_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.userId", 0L);
        // parameter type is org.zendesk.client.v2.model.Identity
        headers.put("CamelZendesk.identity", null);

        final org.zendesk.client.v2.model.Identity result = requestBodyAndHeaders("direct://UPDATEUSERIDENTITY_1", null, headers);

        assertNotNull("updateUserIdentity result", result);
        LOG.debug("updateUserIdentity: " + result);
    }

    // TODO provide parameter values for verifyUserIdentity
    @Ignore
    @Test
    public void testVerifyUserIdentity() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.User
        headers.put("CamelZendesk.user", null);
        // parameter type is org.zendesk.client.v2.model.Identity
        headers.put("CamelZendesk.identity", null);

        final org.zendesk.client.v2.model.Identity result = requestBodyAndHeaders("direct://VERIFYUSERIDENTITY", null, headers);

        assertNotNull("verifyUserIdentity result", result);
        LOG.debug("verifyUserIdentity: " + result);
    }

    // TODO provide parameter values for verifyUserIdentity
    @Ignore
    @Test
    public void testVerifyUserIdentity_1() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        // parameter type is org.zendesk.client.v2.model.User
        headers.put("CamelZendesk.user", null);
        headers.put("CamelZendesk.identityId", 0L);

        final org.zendesk.client.v2.model.Identity result = requestBodyAndHeaders("direct://VERIFYUSERIDENTITY_1", null, headers);

        assertNotNull("verifyUserIdentity result", result);
        LOG.debug("verifyUserIdentity: " + result);
    }

    // TODO provide parameter values for verifyUserIdentity
    @Ignore
    @Test
    public void testVerifyUserIdentity_2() throws Exception {
        final Map<String, Object> headers = new HashMap<String, Object>();
        headers.put("CamelZendesk.userId", 0L);
        headers.put("CamelZendesk.identityId", 0L);

        final org.zendesk.client.v2.model.Identity result = requestBodyAndHeaders("direct://VERIFYUSERIDENTITY_2", null, headers);

        assertNotNull("verifyUserIdentity result", result);
        LOG.debug("verifyUserIdentity: " + result);
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            public void configure() {
                // test route for addTagToOrganisations
                from("direct://ADDTAGTOORGANISATIONS")
                    .to("zendesk://" + PATH_PREFIX + "/addTagToOrganisations");

                // test route for addTagToTicket
                from("direct://ADDTAGTOTICKET")
                    .to("zendesk://" + PATH_PREFIX + "/addTagToTicket");

                // test route for addTagToTopics
                from("direct://ADDTAGTOTOPICS")
                    .to("zendesk://" + PATH_PREFIX + "/addTagToTopics");

                // test route for associateAttachmentsToArticle
                from("direct://ASSOCIATEATTACHMENTSTOARTICLE")
                    .to("zendesk://" + PATH_PREFIX + "/associateAttachmentsToArticle");

                // test route for changeUserPassword
                from("direct://CHANGEUSERPASSWORD")
                    .to("zendesk://" + PATH_PREFIX + "/changeUserPassword");

                // test route for createArticle
                from("direct://CREATEARTICLE")
                    .to("zendesk://" + PATH_PREFIX + "/createArticle?inBody=article");

                // test route for createAutomation
                from("direct://CREATEAUTOMATION")
                    .to("zendesk://" + PATH_PREFIX + "/createAutomation?inBody=automation");

                // test route for createCategory
                from("direct://CREATECATEGORY")
                    .to("zendesk://" + PATH_PREFIX + "/createCategory?inBody=category");

                // test route for createComment
                from("direct://CREATECOMMENT")
                    .to("zendesk://" + PATH_PREFIX + "/createComment");

                // test route for createForum
                from("direct://CREATEFORUM")
                    .to("zendesk://" + PATH_PREFIX + "/createForum?inBody=forum");

                // test route for createGroup
                from("direct://CREATEGROUP")
                    .to("zendesk://" + PATH_PREFIX + "/createGroup?inBody=group");

                // test route for createGroupMembership
                from("direct://CREATEGROUPMEMBERSHIP")
                    .to("zendesk://" + PATH_PREFIX + "/createGroupMembership?inBody=groupMembership");

                // test route for createGroupMembership
                from("direct://CREATEGROUPMEMBERSHIP_1")
                    .to("zendesk://" + PATH_PREFIX + "/createGroupMembership");

                // test route for createMacro
                from("direct://CREATEMACRO")
                    .to("zendesk://" + PATH_PREFIX + "/createMacro?inBody=macro");

                // test route for createOrUpdateUser
                from("direct://CREATEORUPDATEUSER")
                    .to("zendesk://" + PATH_PREFIX + "/createOrUpdateUser?inBody=user");

                // test route for createOrganization
                from("direct://CREATEORGANIZATION")
                    .to("zendesk://" + PATH_PREFIX + "/createOrganization?inBody=organization");

                // test route for createOrganizationMembership
                from("direct://CREATEORGANIZATIONMEMBERSHIP")
                    .to("zendesk://" + PATH_PREFIX + "/createOrganizationMembership?inBody=organizationMembership");

                // test route for createOrganizationMembership
                from("direct://CREATEORGANIZATIONMEMBERSHIP_1")
                    .to("zendesk://" + PATH_PREFIX + "/createOrganizationMembership");

                // test route for createOrganizations
                from("direct://CREATEORGANIZATIONS")
                    .to("zendesk://" + PATH_PREFIX + "/createOrganizations?inBody=organizationList");

                // test route for createOrganizations
                from("direct://CREATEORGANIZATIONS_1")
                    .to("zendesk://" + PATH_PREFIX + "/createOrganizations?inBody=organizations");

                // test route for createOrganizationsAsync
                from("direct://CREATEORGANIZATIONSASYNC")
                    .to("zendesk://" + PATH_PREFIX + "/createOrganizationsAsync?inBody=organizationList");

                // test route for createRequest
                from("direct://CREATEREQUEST")
                    .to("zendesk://" + PATH_PREFIX + "/createRequest?inBody=request");

                // test route for createSatisfactionRating
                from("direct://CREATESATISFACTIONRATING")
                    .to("zendesk://" + PATH_PREFIX + "/createSatisfactionRating");

                // test route for createSatisfactionRating
                from("direct://CREATESATISFACTIONRATING_1")
                    .to("zendesk://" + PATH_PREFIX + "/createSatisfactionRating");

                // test route for createSection
                from("direct://CREATESECTION")
                    .to("zendesk://" + PATH_PREFIX + "/createSection?inBody=section");

                // test route for createTarget
                from("direct://CREATETARGET")
                    .to("zendesk://" + PATH_PREFIX + "/createTarget?inBody=target");

                // test route for createTicket
                from("direct://CREATETICKET")
                    .to("zendesk://" + PATH_PREFIX + "/createTicket?inBody=ticket");

                // test route for createTicketField
                from("direct://CREATETICKETFIELD")
                    .to("zendesk://" + PATH_PREFIX + "/createTicketField?inBody=field");

                // test route for createTicketFromTweet
                from("direct://CREATETICKETFROMTWEET")
                    .to("zendesk://" + PATH_PREFIX + "/createTicketFromTweet");

                // test route for createTickets
                from("direct://CREATETICKETS")
                    .to("zendesk://" + PATH_PREFIX + "/createTickets?inBody=ticketList");

                // test route for createTickets
                from("direct://CREATETICKETS_1")
                    .to("zendesk://" + PATH_PREFIX + "/createTickets?inBody=tickets");

                // test route for createTicketsAsync
                from("direct://CREATETICKETSASYNC")
                    .to("zendesk://" + PATH_PREFIX + "/createTicketsAsync?inBody=ticketList");

                // test route for createTopic
                from("direct://CREATETOPIC")
                    .to("zendesk://" + PATH_PREFIX + "/createTopic?inBody=topic");

                // test route for createTrigger
                from("direct://CREATETRIGGER")
                    .to("zendesk://" + PATH_PREFIX + "/createTrigger?inBody=trigger");

                // test route for createUpload
                from("direct://CREATEUPLOAD")
                    .to("zendesk://" + PATH_PREFIX + "/createUpload");

                // test route for createUpload
                from("direct://CREATEUPLOAD_1")
                    .to("zendesk://" + PATH_PREFIX + "/createUpload");

                // test route for createUpload
                from("direct://CREATEUPLOAD_2")
                    .to("zendesk://" + PATH_PREFIX + "/createUpload");

                // test route for createUploadArticle
                from("direct://CREATEUPLOADARTICLE")
                    .to("zendesk://" + PATH_PREFIX + "/createUploadArticle");

                // test route for createUser
                from("direct://CREATEUSER")
                    .to("zendesk://" + PATH_PREFIX + "/createUser?inBody=user");

                // test route for createUserIdentity
                from("direct://CREATEUSERIDENTITY")
                    .to("zendesk://" + PATH_PREFIX + "/createUserIdentity");

                // test route for createUserIdentity
                from("direct://CREATEUSERIDENTITY_1")
                    .to("zendesk://" + PATH_PREFIX + "/createUserIdentity");

                // test route for createUsers
                from("direct://CREATEUSERS")
                    .to("zendesk://" + PATH_PREFIX + "/createUsers?inBody=userList");

                // test route for createUsers
                from("direct://CREATEUSERS_1")
                    .to("zendesk://" + PATH_PREFIX + "/createUsers?inBody=users");

                // test route for createUsersAsync
                from("direct://CREATEUSERSASYNC")
                    .to("zendesk://" + PATH_PREFIX + "/createUsersAsync?inBody=userList");

                // test route for deleteArticle
                from("direct://DELETEARTICLE")
                    .to("zendesk://" + PATH_PREFIX + "/deleteArticle?inBody=article");

                // test route for deleteArticleAttachment
                from("direct://DELETEARTICLEATTACHMENT")
                    .to("zendesk://" + PATH_PREFIX + "/deleteArticleAttachment?inBody=articleAttachments");

                // test route for deleteArticleAttachment
                from("direct://DELETEARTICLEATTACHMENT_1")
                    .to("zendesk://" + PATH_PREFIX + "/deleteArticleAttachment?inBody=id");

                // test route for deleteAttachment
                from("direct://DELETEATTACHMENT")
                    .to("zendesk://" + PATH_PREFIX + "/deleteAttachment?inBody=attachment");

                // test route for deleteAttachment
                from("direct://DELETEATTACHMENT_1")
                    .to("zendesk://" + PATH_PREFIX + "/deleteAttachment?inBody=id");

                // test route for deleteAutomation
                from("direct://DELETEAUTOMATION")
                    .to("zendesk://" + PATH_PREFIX + "/deleteAutomation?inBody=automationId0");

                // test route for deleteCategory
                from("direct://DELETECATEGORY")
                    .to("zendesk://" + PATH_PREFIX + "/deleteCategory?inBody=category");

                // test route for deleteForum
                from("direct://DELETEFORUM")
                    .to("zendesk://" + PATH_PREFIX + "/deleteForum?inBody=forum");

                // test route for deleteGroup
                from("direct://DELETEGROUP")
                    .to("zendesk://" + PATH_PREFIX + "/deleteGroup?inBody=group");

                // test route for deleteGroup
                from("direct://DELETEGROUP_1")
                    .to("zendesk://" + PATH_PREFIX + "/deleteGroup?inBody=id");

                // test route for deleteGroupMembership
                from("direct://DELETEGROUPMEMBERSHIP")
                    .to("zendesk://" + PATH_PREFIX + "/deleteGroupMembership?inBody=groupMembership");

                // test route for deleteGroupMembership
                from("direct://DELETEGROUPMEMBERSHIP_1")
                    .to("zendesk://" + PATH_PREFIX + "/deleteGroupMembership?inBody=id");

                // test route for deleteGroupMembership
                from("direct://DELETEGROUPMEMBERSHIP_2")
                    .to("zendesk://" + PATH_PREFIX + "/deleteGroupMembership");

                // test route for deleteGroupMembership
                from("direct://DELETEGROUPMEMBERSHIP_3")
                    .to("zendesk://" + PATH_PREFIX + "/deleteGroupMembership");

                // test route for deleteOrganization
                from("direct://DELETEORGANIZATION")
                    .to("zendesk://" + PATH_PREFIX + "/deleteOrganization?inBody=id");

                // test route for deleteOrganization
                from("direct://DELETEORGANIZATION_1")
                    .to("zendesk://" + PATH_PREFIX + "/deleteOrganization?inBody=organization");

                // test route for deleteOrganizationMembership
                from("direct://DELETEORGANIZATIONMEMBERSHIP")
                    .to("zendesk://" + PATH_PREFIX + "/deleteOrganizationMembership?inBody=id");

                // test route for deleteOrganizationMembership
                from("direct://DELETEORGANIZATIONMEMBERSHIP_1")
                    .to("zendesk://" + PATH_PREFIX + "/deleteOrganizationMembership");

                // test route for deleteOrganizationMembership
                from("direct://DELETEORGANIZATIONMEMBERSHIP_2")
                    .to("zendesk://" + PATH_PREFIX + "/deleteOrganizationMembership");

                // test route for deleteSection
                from("direct://DELETESECTION")
                    .to("zendesk://" + PATH_PREFIX + "/deleteSection?inBody=section");

                // test route for deleteSuspendedTicket
                from("direct://DELETESUSPENDEDTICKET")
                    .to("zendesk://" + PATH_PREFIX + "/deleteSuspendedTicket?inBody=id");

                // test route for deleteSuspendedTicket
                from("direct://DELETESUSPENDEDTICKET_1")
                    .to("zendesk://" + PATH_PREFIX + "/deleteSuspendedTicket?inBody=suspendedTicket");

                // test route for deleteTarget
                from("direct://DELETETARGET")
                    .to("zendesk://" + PATH_PREFIX + "/deleteTarget?inBody=targetId");

                // test route for deleteTicket
                from("direct://DELETETICKET")
                    .to("zendesk://" + PATH_PREFIX + "/deleteTicket?inBody=id");

                // test route for deleteTicket
                from("direct://DELETETICKET_1")
                    .to("zendesk://" + PATH_PREFIX + "/deleteTicket?inBody=ticket");

                // test route for deleteTicketField
                from("direct://DELETETICKETFIELD")
                    .to("zendesk://" + PATH_PREFIX + "/deleteTicketField?inBody=field");

                // test route for deleteTicketField
                from("direct://DELETETICKETFIELD_1")
                    .to("zendesk://" + PATH_PREFIX + "/deleteTicketField?inBody=id");

                // test route for deleteTickets
                from("direct://DELETETICKETS")
                    .to("zendesk://" + PATH_PREFIX + "/deleteTickets");

                // test route for deleteTopic
                from("direct://DELETETOPIC")
                    .to("zendesk://" + PATH_PREFIX + "/deleteTopic?inBody=topic");

                // test route for deleteTrigger
                from("direct://DELETETRIGGER")
                    .to("zendesk://" + PATH_PREFIX + "/deleteTrigger?inBody=triggerId");

                // test route for deleteUpload
                from("direct://DELETEUPLOAD")
                    .to("zendesk://" + PATH_PREFIX + "/deleteUpload?inBody=token");

                // test route for deleteUpload
                from("direct://DELETEUPLOAD_1")
                    .to("zendesk://" + PATH_PREFIX + "/deleteUpload?inBody=upload");

                // test route for deleteUser
                from("direct://DELETEUSER")
                    .to("zendesk://" + PATH_PREFIX + "/deleteUser?inBody=id");

                // test route for deleteUser
                from("direct://DELETEUSER_1")
                    .to("zendesk://" + PATH_PREFIX + "/deleteUser?inBody=user");

                // test route for deleteUserIdentity
                from("direct://DELETEUSERIDENTITY")
                    .to("zendesk://" + PATH_PREFIX + "/deleteUserIdentity");

                // test route for deleteUserIdentity
                from("direct://DELETEUSERIDENTITY_1")
                    .to("zendesk://" + PATH_PREFIX + "/deleteUserIdentity");

                // test route for deleteUserIdentity
                from("direct://DELETEUSERIDENTITY_2")
                    .to("zendesk://" + PATH_PREFIX + "/deleteUserIdentity");

                // test route for getArticle
                from("direct://GETARTICLE")
                    .to("zendesk://" + PATH_PREFIX + "/getArticle?inBody=id");

                // test route for getArticleFromSearch
                from("direct://GETARTICLEFROMSEARCH")
                    .to("zendesk://" + PATH_PREFIX + "/getArticleFromSearch?inBody=searchTerm");

                // test route for getArticleFromSearch
                from("direct://GETARTICLEFROMSEARCH_1")
                    .to("zendesk://" + PATH_PREFIX + "/getArticleFromSearch");

                // test route for getArticleSubscriptions
                from("direct://GETARTICLESUBSCRIPTIONS")
                    .to("zendesk://" + PATH_PREFIX + "/getArticleSubscriptions?inBody=articleId");

                // test route for getArticleSubscriptions
                from("direct://GETARTICLESUBSCRIPTIONS_1")
                    .to("zendesk://" + PATH_PREFIX + "/getArticleSubscriptions");

                // test route for getArticleTranslations
                from("direct://GETARTICLETRANSLATIONS")
                    .to("zendesk://" + PATH_PREFIX + "/getArticleTranslations?inBody=articleId");

                // test route for getArticles
                from("direct://GETARTICLES")
                    .to("zendesk://" + PATH_PREFIX + "/getArticles");

                // test route for getArticles
                from("direct://GETARTICLES_1")
                    .to("zendesk://" + PATH_PREFIX + "/getArticles?inBody=category");

                // test route for getArticlesFromPage
                from("direct://GETARTICLESFROMPAGE")
                    .to("zendesk://" + PATH_PREFIX + "/getArticlesFromPage?inBody=page");

                // test route for getArticlesIncrementally
                from("direct://GETARTICLESINCREMENTALLY")
                    .to("zendesk://" + PATH_PREFIX + "/getArticlesIncrementally?inBody=startTime");

                // test route for getAssignableGroupMemberships
                from("direct://GETASSIGNABLEGROUPMEMBERSHIPS")
                    .to("zendesk://" + PATH_PREFIX + "/getAssignableGroupMemberships");

                // test route for getAssignableGroupMemberships
                from("direct://GETASSIGNABLEGROUPMEMBERSHIPS_1")
                    .to("zendesk://" + PATH_PREFIX + "/getAssignableGroupMemberships?inBody=group_id");

                // test route for getAssignableGroups
                from("direct://GETASSIGNABLEGROUPS")
                    .to("zendesk://" + PATH_PREFIX + "/getAssignableGroups");

                // test route for getAttachment
                from("direct://GETATTACHMENT")
                    .to("zendesk://" + PATH_PREFIX + "/getAttachment?inBody=attachment");

                // test route for getAttachment
                from("direct://GETATTACHMENT_1")
                    .to("zendesk://" + PATH_PREFIX + "/getAttachment?inBody=id");

                // test route for getAttachmentsFromArticle
                from("direct://GETATTACHMENTSFROMARTICLE")
                    .to("zendesk://" + PATH_PREFIX + "/getAttachmentsFromArticle?inBody=articleID");

                // test route for getAuthenticatedUser
                from("direct://GETAUTHENTICATEDUSER")
                    .to("zendesk://" + PATH_PREFIX + "/getAuthenticatedUser");

                // test route for getAutoCompleteOrganizations
                from("direct://GETAUTOCOMPLETEORGANIZATIONS")
                    .to("zendesk://" + PATH_PREFIX + "/getAutoCompleteOrganizations?inBody=name");

                // test route for getAutomation
                from("direct://GETAUTOMATION")
                    .to("zendesk://" + PATH_PREFIX + "/getAutomation?inBody=id");

                // test route for getAutomations
                from("direct://GETAUTOMATIONS")
                    .to("zendesk://" + PATH_PREFIX + "/getAutomations");

                // test route for getBrands
                from("direct://GETBRANDS")
                    .to("zendesk://" + PATH_PREFIX + "/getBrands");

                // test route for getCCRequests
                from("direct://GETCCREQUESTS")
                    .to("zendesk://" + PATH_PREFIX + "/getCCRequests");

                // test route for getCategories
                from("direct://GETCATEGORIES")
                    .to("zendesk://" + PATH_PREFIX + "/getCategories");

                // test route for getCategory
                from("direct://GETCATEGORY")
                    .to("zendesk://" + PATH_PREFIX + "/getCategory?inBody=id");

                // test route for getCategoryTranslations
                from("direct://GETCATEGORYTRANSLATIONS")
                    .to("zendesk://" + PATH_PREFIX + "/getCategoryTranslations?inBody=categoryId");

                // test route for getCurrentUser
                from("direct://GETCURRENTUSER")
                    .to("zendesk://" + PATH_PREFIX + "/getCurrentUser");

                // test route for getCustomAgentRoles
                from("direct://GETCUSTOMAGENTROLES")
                    .to("zendesk://" + PATH_PREFIX + "/getCustomAgentRoles");

                // test route for getForum
                from("direct://GETFORUM")
                    .to("zendesk://" + PATH_PREFIX + "/getForum?inBody=id");

                // test route for getForums
                from("direct://GETFORUMS")
                    .to("zendesk://" + PATH_PREFIX + "/getForums");

                // test route for getForums
                from("direct://GETFORUMS_1")
                    .to("zendesk://" + PATH_PREFIX + "/getForums?inBody=category_id");

                // test route for getGroup
                from("direct://GETGROUP")
                    .to("zendesk://" + PATH_PREFIX + "/getGroup?inBody=id");

                // test route for getGroupMembership
                from("direct://GETGROUPMEMBERSHIP")
                    .to("zendesk://" + PATH_PREFIX + "/getGroupMembership?inBody=id");

                // test route for getGroupMembership
                from("direct://GETGROUPMEMBERSHIP_1")
                    .to("zendesk://" + PATH_PREFIX + "/getGroupMembership");

                // test route for getGroupMembershipByUser
                from("direct://GETGROUPMEMBERSHIPBYUSER")
                    .to("zendesk://" + PATH_PREFIX + "/getGroupMembershipByUser?inBody=user_id");

                // test route for getGroupMemberships
                from("direct://GETGROUPMEMBERSHIPS")
                    .to("zendesk://" + PATH_PREFIX + "/getGroupMemberships");

                // test route for getGroupMemberships
                from("direct://GETGROUPMEMBERSHIPS_1")
                    .to("zendesk://" + PATH_PREFIX + "/getGroupMemberships?inBody=group_id");

                // test route for getGroupOrganization
                from("direct://GETGROUPORGANIZATION")
                    .to("zendesk://" + PATH_PREFIX + "/getGroupOrganization");

                // test route for getGroupUsers
                from("direct://GETGROUPUSERS")
                    .to("zendesk://" + PATH_PREFIX + "/getGroupUsers?inBody=id");

                // test route for getGroups
                from("direct://GETGROUPS")
                    .to("zendesk://" + PATH_PREFIX + "/getGroups");

                // test route for getHolidaysForSchedule
                from("direct://GETHOLIDAYSFORSCHEDULE")
                    .to("zendesk://" + PATH_PREFIX + "/getHolidaysForSchedule?inBody=schedule");

                // test route for getHolidaysForSchedule
                from("direct://GETHOLIDAYSFORSCHEDULE_1")
                    .to("zendesk://" + PATH_PREFIX + "/getHolidaysForSchedule?inBody=scheduleId");

                // test route for getIncrementalTicketsResult
                from("direct://GETINCREMENTALTICKETSRESULT")
                    .to("zendesk://" + PATH_PREFIX + "/getIncrementalTicketsResult?inBody=unixEpochTime");

                // test route for getJobStatus
                from("direct://GETJOBSTATUS")
                    .to("zendesk://" + PATH_PREFIX + "/getJobStatus?inBody=status");

                // test route for getJobStatusAsync
                from("direct://GETJOBSTATUSASYNC")
                    .to("zendesk://" + PATH_PREFIX + "/getJobStatusAsync?inBody=status");

                // test route for getJobStatuses
                from("direct://GETJOBSTATUSES")
                    .to("zendesk://" + PATH_PREFIX + "/getJobStatuses?inBody=statuses");

                // test route for getJobStatusesAsync
                from("direct://GETJOBSTATUSESASYNC")
                    .to("zendesk://" + PATH_PREFIX + "/getJobStatusesAsync?inBody=statuses");

                // test route for getMacro
                from("direct://GETMACRO")
                    .to("zendesk://" + PATH_PREFIX + "/getMacro?inBody=macroId");

                // test route for getMacros
                from("direct://GETMACROS")
                    .to("zendesk://" + PATH_PREFIX + "/getMacros");

                // test route for getOpenRequests
                from("direct://GETOPENREQUESTS")
                    .to("zendesk://" + PATH_PREFIX + "/getOpenRequests");

                // test route for getOrganization
                from("direct://GETORGANIZATION")
                    .to("zendesk://" + PATH_PREFIX + "/getOrganization?inBody=id");

                // test route for getOrganizationFields
                from("direct://GETORGANIZATIONFIELDS")
                    .to("zendesk://" + PATH_PREFIX + "/getOrganizationFields");

                // test route for getOrganizationMembership
                from("direct://GETORGANIZATIONMEMBERSHIP")
                    .to("zendesk://" + PATH_PREFIX + "/getOrganizationMembership?inBody=id");

                // test route for getOrganizationMembershipByUser
                from("direct://GETORGANIZATIONMEMBERSHIPBYUSER")
                    .to("zendesk://" + PATH_PREFIX + "/getOrganizationMembershipByUser?inBody=user_id");

                // test route for getOrganizationMembershipForUser
                from("direct://GETORGANIZATIONMEMBERSHIPFORUSER")
                    .to("zendesk://" + PATH_PREFIX + "/getOrganizationMembershipForUser");

                // test route for getOrganizationMemberships
                from("direct://GETORGANIZATIONMEMBERSHIPS")
                    .to("zendesk://" + PATH_PREFIX + "/getOrganizationMemberships");

                // test route for getOrganizationMembershipsForOrg
                from("direct://GETORGANIZATIONMEMBERSHIPSFORORG")
                    .to("zendesk://" + PATH_PREFIX + "/getOrganizationMembershipsForOrg?inBody=organization_id");

                // test route for getOrganizationMembershipsForUser
                from("direct://GETORGANIZATIONMEMBERSHIPSFORUSER")
                    .to("zendesk://" + PATH_PREFIX + "/getOrganizationMembershipsForUser?inBody=user_id");

                // test route for getOrganizationTickets
                from("direct://GETORGANIZATIONTICKETS")
                    .to("zendesk://" + PATH_PREFIX + "/getOrganizationTickets?inBody=organizationId");

                // test route for getOrganizationUsers
                from("direct://GETORGANIZATIONUSERS")
                    .to("zendesk://" + PATH_PREFIX + "/getOrganizationUsers?inBody=id");

                // test route for getOrganizations
                from("direct://GETORGANIZATIONS")
                    .to("zendesk://" + PATH_PREFIX + "/getOrganizations");

                // test route for getOrganizationsIncrementally
                from("direct://GETORGANIZATIONSINCREMENTALLY")
                    .to("zendesk://" + PATH_PREFIX + "/getOrganizationsIncrementally?inBody=startTime");

                // test route for getRecentTickets
                from("direct://GETRECENTTICKETS")
                    .to("zendesk://" + PATH_PREFIX + "/getRecentTickets");

                // test route for getRequest
                from("direct://GETREQUEST")
                    .to("zendesk://" + PATH_PREFIX + "/getRequest?inBody=id");

                // test route for getRequestComment
                from("direct://GETREQUESTCOMMENT")
                    .to("zendesk://" + PATH_PREFIX + "/getRequestComment");

                // test route for getRequestComment
                from("direct://GETREQUESTCOMMENT_1")
                    .to("zendesk://" + PATH_PREFIX + "/getRequestComment");

                // test route for getRequestComment
                from("direct://GETREQUESTCOMMENT_2")
                    .to("zendesk://" + PATH_PREFIX + "/getRequestComment");

                // test route for getRequestComments
                from("direct://GETREQUESTCOMMENTS")
                    .to("zendesk://" + PATH_PREFIX + "/getRequestComments?inBody=id");

                // test route for getRequestComments
                from("direct://GETREQUESTCOMMENTS_1")
                    .to("zendesk://" + PATH_PREFIX + "/getRequestComments?inBody=request");

                // test route for getRequests
                from("direct://GETREQUESTS")
                    .to("zendesk://" + PATH_PREFIX + "/getRequests");

                // test route for getSatisfactionRating
                from("direct://GETSATISFACTIONRATING")
                    .to("zendesk://" + PATH_PREFIX + "/getSatisfactionRating?inBody=id");

                // test route for getSatisfactionRatings
                from("direct://GETSATISFACTIONRATINGS")
                    .to("zendesk://" + PATH_PREFIX + "/getSatisfactionRatings");

                // test route for getSchedule
                from("direct://GETSCHEDULE")
                    .to("zendesk://" + PATH_PREFIX + "/getSchedule?inBody=schedule");

                // test route for getSchedule
                from("direct://GETSCHEDULE_1")
                    .to("zendesk://" + PATH_PREFIX + "/getSchedule?inBody=scheduleId");

                // test route for getSchedules
                from("direct://GETSCHEDULES")
                    .to("zendesk://" + PATH_PREFIX + "/getSchedules");

                // test route for getSearchResults
                from("direct://GETSEARCHRESULTS")
                    .to("zendesk://" + PATH_PREFIX + "/getSearchResults?inBody=query");

                // test route for getSearchResults
                from("direct://GETSEARCHRESULTS_1")
                    .to("zendesk://" + PATH_PREFIX + "/getSearchResults");

                // test route for getSearchResults
                from("direct://GETSEARCHRESULTS_2")
                    .to("zendesk://" + PATH_PREFIX + "/getSearchResults");

                // test route for getSection
                from("direct://GETSECTION")
                    .to("zendesk://" + PATH_PREFIX + "/getSection?inBody=id");

                // test route for getSectionSubscriptions
                from("direct://GETSECTIONSUBSCRIPTIONS")
                    .to("zendesk://" + PATH_PREFIX + "/getSectionSubscriptions?inBody=sectionId");

                // test route for getSectionSubscriptions
                from("direct://GETSECTIONSUBSCRIPTIONS_1")
                    .to("zendesk://" + PATH_PREFIX + "/getSectionSubscriptions");

                // test route for getSectionTranslations
                from("direct://GETSECTIONTRANSLATIONS")
                    .to("zendesk://" + PATH_PREFIX + "/getSectionTranslations?inBody=sectionId");

                // test route for getSections
                from("direct://GETSECTIONS")
                    .to("zendesk://" + PATH_PREFIX + "/getSections");

                // test route for getSections
                from("direct://GETSECTIONS_1")
                    .to("zendesk://" + PATH_PREFIX + "/getSections?inBody=category");

                // test route for getSolvedRequests
                from("direct://GETSOLVEDREQUESTS")
                    .to("zendesk://" + PATH_PREFIX + "/getSolvedRequests");

                // test route for getSuspendedTickets
                from("direct://GETSUSPENDEDTICKETS")
                    .to("zendesk://" + PATH_PREFIX + "/getSuspendedTickets");

                // test route for getTarget
                from("direct://GETTARGET")
                    .to("zendesk://" + PATH_PREFIX + "/getTarget?inBody=id");

                // test route for getTargets
                from("direct://GETTARGETS")
                    .to("zendesk://" + PATH_PREFIX + "/getTargets");

                // test route for getTicket
                from("direct://GETTICKET")
                    .to("zendesk://" + PATH_PREFIX + "/getTicket?inBody=id");

                // test route for getTicketAudit
                from("direct://GETTICKETAUDIT")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketAudit");

                // test route for getTicketAudit
                from("direct://GETTICKETAUDIT_1")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketAudit");

                // test route for getTicketAudit
                from("direct://GETTICKETAUDIT_2")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketAudit");

                // test route for getTicketAudits
                from("direct://GETTICKETAUDITS")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketAudits?inBody=ticket");

                // test route for getTicketAudits
                from("direct://GETTICKETAUDITS_1")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketAudits?inBody=ticketId0");

                // test route for getTicketCollaborators
                from("direct://GETTICKETCOLLABORATORS")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketCollaborators?inBody=id");

                // test route for getTicketComments
                from("direct://GETTICKETCOMMENTS")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketComments?inBody=id");

                // test route for getTicketField
                from("direct://GETTICKETFIELD")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketField?inBody=id");

                // test route for getTicketFields
                from("direct://GETTICKETFIELDS")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketFields");

                // test route for getTicketForm
                from("direct://GETTICKETFORM")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketForm?inBody=id");

                // test route for getTicketForms
                from("direct://GETTICKETFORMS")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketForms");

                // test route for getTicketIncidents
                from("direct://GETTICKETINCIDENTS")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketIncidents?inBody=id");

                // test route for getTicketMetric
                from("direct://GETTICKETMETRIC")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketMetric?inBody=id");

                // test route for getTicketMetricByTicket
                from("direct://GETTICKETMETRICBYTICKET")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketMetricByTicket?inBody=id");

                // test route for getTicketMetrics
                from("direct://GETTICKETMETRICS")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketMetrics");

                // test route for getTickets
                from("direct://GETTICKETS")
                    .to("zendesk://" + PATH_PREFIX + "/getTickets");

                // test route for getTickets
                from("direct://GETTICKETS_1")
                    .to("zendesk://" + PATH_PREFIX + "/getTickets");

                // test route for getTicketsByExternalId
                from("direct://GETTICKETSBYEXTERNALID")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketsByExternalId?inBody=externalId");

                // test route for getTicketsByExternalId
                from("direct://GETTICKETSBYEXTERNALID_1")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketsByExternalId");

                // test route for getTicketsFromSearch
                from("direct://GETTICKETSFROMSEARCH")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketsFromSearch?inBody=searchTerm");

                // test route for getTicketsIncrementally
                from("direct://GETTICKETSINCREMENTALLY")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketsIncrementally?inBody=startTime");

                // test route for getTicketsIncrementally
                from("direct://GETTICKETSINCREMENTALLY_1")
                    .to("zendesk://" + PATH_PREFIX + "/getTicketsIncrementally");

                // test route for getTopic
                from("direct://GETTOPIC")
                    .to("zendesk://" + PATH_PREFIX + "/getTopic?inBody=id");

                // test route for getTopics
                from("direct://GETTOPICS")
                    .to("zendesk://" + PATH_PREFIX + "/getTopics");

                // test route for getTopics
                from("direct://GETTOPICS_1")
                    .to("zendesk://" + PATH_PREFIX + "/getTopics?inBody=forum_id");

                // test route for getTopics
                from("direct://GETTOPICS_2")
                    .to("zendesk://" + PATH_PREFIX + "/getTopics");

                // test route for getTopicsByUser
                from("direct://GETTOPICSBYUSER")
                    .to("zendesk://" + PATH_PREFIX + "/getTopicsByUser?inBody=user_id");

                // test route for getTrigger
                from("direct://GETTRIGGER")
                    .to("zendesk://" + PATH_PREFIX + "/getTrigger?inBody=id");

                // test route for getTriggers
                from("direct://GETTRIGGERS")
                    .to("zendesk://" + PATH_PREFIX + "/getTriggers");

                // test route for getTwitterMonitors
                from("direct://GETTWITTERMONITORS")
                    .to("zendesk://" + PATH_PREFIX + "/getTwitterMonitors");

                // test route for getUser
                from("direct://GETUSER")
                    .to("zendesk://" + PATH_PREFIX + "/getUser?inBody=id");

                // test route for getUserCCDTickets
                from("direct://GETUSERCCDTICKETS")
                    .to("zendesk://" + PATH_PREFIX + "/getUserCCDTickets?inBody=userId");

                // test route for getUserFields
                from("direct://GETUSERFIELDS")
                    .to("zendesk://" + PATH_PREFIX + "/getUserFields");

                // test route for getUserIdentities
                from("direct://GETUSERIDENTITIES")
                    .to("zendesk://" + PATH_PREFIX + "/getUserIdentities?inBody=user");

                // test route for getUserIdentities
                from("direct://GETUSERIDENTITIES_1")
                    .to("zendesk://" + PATH_PREFIX + "/getUserIdentities?inBody=userId");

                // test route for getUserIdentity
                from("direct://GETUSERIDENTITY")
                    .to("zendesk://" + PATH_PREFIX + "/getUserIdentity");

                // test route for getUserIdentity
                from("direct://GETUSERIDENTITY_1")
                    .to("zendesk://" + PATH_PREFIX + "/getUserIdentity");

                // test route for getUserIdentity
                from("direct://GETUSERIDENTITY_2")
                    .to("zendesk://" + PATH_PREFIX + "/getUserIdentity");

                // test route for getUserRequestedTickets
                from("direct://GETUSERREQUESTEDTICKETS")
                    .to("zendesk://" + PATH_PREFIX + "/getUserRequestedTickets?inBody=userId");

                // test route for getUserRequests
                from("direct://GETUSERREQUESTS")
                    .to("zendesk://" + PATH_PREFIX + "/getUserRequests?inBody=id");

                // test route for getUserRequests
                from("direct://GETUSERREQUESTS_1")
                    .to("zendesk://" + PATH_PREFIX + "/getUserRequests?inBody=user");

                // test route for getUserSubscriptions
                from("direct://GETUSERSUBSCRIPTIONS")
                    .to("zendesk://" + PATH_PREFIX + "/getUserSubscriptions?inBody=user");

                // test route for getUserSubscriptions
                from("direct://GETUSERSUBSCRIPTIONS_1")
                    .to("zendesk://" + PATH_PREFIX + "/getUserSubscriptions?inBody=userId0");

                // test route for getUsers
                from("direct://GETUSERS")
                    .to("zendesk://" + PATH_PREFIX + "/getUsers");

                // test route for getUsersByRole
                from("direct://GETUSERSBYROLE")
                    .to("zendesk://" + PATH_PREFIX + "/getUsersByRole");

                // test route for getUsersIncrementally
                from("direct://GETUSERSINCREMENTALLY")
                    .to("zendesk://" + PATH_PREFIX + "/getUsersIncrementally?inBody=startTime");

                // test route for importTopic
                from("direct://IMPORTTOPIC")
                    .to("zendesk://" + PATH_PREFIX + "/importTopic?inBody=topic");

                // test route for lookupOrganizationsByExternalId
                from("direct://LOOKUPORGANIZATIONSBYEXTERNALID")
                    .to("zendesk://" + PATH_PREFIX + "/lookupOrganizationsByExternalId?inBody=externalId");

                // test route for lookupUserByEmail
                from("direct://LOOKUPUSERBYEMAIL")
                    .to("zendesk://" + PATH_PREFIX + "/lookupUserByEmail?inBody=email");

                // test route for lookupUserByExternalId
                from("direct://LOOKUPUSERBYEXTERNALID")
                    .to("zendesk://" + PATH_PREFIX + "/lookupUserByExternalId?inBody=externalId");

                // test route for macrosShowChangesToTicket
                from("direct://MACROSSHOWCHANGESTOTICKET")
                    .to("zendesk://" + PATH_PREFIX + "/macrosShowChangesToTicket?inBody=macroId");

                // test route for macrosShowTicketAfterChanges
                from("direct://MACROSSHOWTICKETAFTERCHANGES")
                    .to("zendesk://" + PATH_PREFIX + "/macrosShowTicketAfterChanges");

                // test route for makePrivateTicketAudit
                from("direct://MAKEPRIVATETICKETAUDIT")
                    .to("zendesk://" + PATH_PREFIX + "/makePrivateTicketAudit");

                // test route for makePrivateTicketAudit
                from("direct://MAKEPRIVATETICKETAUDIT_1")
                    .to("zendesk://" + PATH_PREFIX + "/makePrivateTicketAudit");

                // test route for makePrivateTicketAudit
                from("direct://MAKEPRIVATETICKETAUDIT_2")
                    .to("zendesk://" + PATH_PREFIX + "/makePrivateTicketAudit");

                // test route for markTicketAsSpam
                from("direct://MARKTICKETASSPAM")
                    .to("zendesk://" + PATH_PREFIX + "/markTicketAsSpam?inBody=id");

                // test route for markTicketAsSpam
                from("direct://MARKTICKETASSPAM_1")
                    .to("zendesk://" + PATH_PREFIX + "/markTicketAsSpam?inBody=ticket");

                // test route for notifyApp
                from("direct://NOTIFYAPP")
                    .to("zendesk://" + PATH_PREFIX + "/notifyApp?inBody=json");

                // test route for removeTagFromOrganisations
                from("direct://REMOVETAGFROMORGANISATIONS")
                    .to("zendesk://" + PATH_PREFIX + "/removeTagFromOrganisations");

                // test route for removeTagFromTicket
                from("direct://REMOVETAGFROMTICKET")
                    .to("zendesk://" + PATH_PREFIX + "/removeTagFromTicket");

                // test route for removeTagFromTopics
                from("direct://REMOVETAGFROMTOPICS")
                    .to("zendesk://" + PATH_PREFIX + "/removeTagFromTopics");

                // test route for requestVerifyUserIdentity
                from("direct://REQUESTVERIFYUSERIDENTITY")
                    .to("zendesk://" + PATH_PREFIX + "/requestVerifyUserIdentity");

                // test route for requestVerifyUserIdentity
                from("direct://REQUESTVERIFYUSERIDENTITY_1")
                    .to("zendesk://" + PATH_PREFIX + "/requestVerifyUserIdentity");

                // test route for requestVerifyUserIdentity
                from("direct://REQUESTVERIFYUSERIDENTITY_2")
                    .to("zendesk://" + PATH_PREFIX + "/requestVerifyUserIdentity");

                // test route for resetUserPassword
                from("direct://RESETUSERPASSWORD")
                    .to("zendesk://" + PATH_PREFIX + "/resetUserPassword");

                // test route for resetUserPassword
                from("direct://RESETUSERPASSWORD_1")
                    .to("zendesk://" + PATH_PREFIX + "/resetUserPassword");

                // test route for setGroupMembershipAsDefault
                from("direct://SETGROUPMEMBERSHIPASDEFAULT")
                    .to("zendesk://" + PATH_PREFIX + "/setGroupMembershipAsDefault");

                // test route for setOrganizationMembershipAsDefault
                from("direct://SETORGANIZATIONMEMBERSHIPASDEFAULT")
                    .to("zendesk://" + PATH_PREFIX + "/setOrganizationMembershipAsDefault");

                // test route for setTagOnOrganisations
                from("direct://SETTAGONORGANISATIONS")
                    .to("zendesk://" + PATH_PREFIX + "/setTagOnOrganisations");

                // test route for setTagOnTicket
                from("direct://SETTAGONTICKET")
                    .to("zendesk://" + PATH_PREFIX + "/setTagOnTicket");

                // test route for setTagOnTopics
                from("direct://SETTAGONTOPICS")
                    .to("zendesk://" + PATH_PREFIX + "/setTagOnTopics");

                // test route for setUserPrimaryIdentity
                from("direct://SETUSERPRIMARYIDENTITY")
                    .to("zendesk://" + PATH_PREFIX + "/setUserPrimaryIdentity");

                // test route for setUserPrimaryIdentity
                from("direct://SETUSERPRIMARYIDENTITY_1")
                    .to("zendesk://" + PATH_PREFIX + "/setUserPrimaryIdentity");

                // test route for setUserPrimaryIdentity
                from("direct://SETUSERPRIMARYIDENTITY_2")
                    .to("zendesk://" + PATH_PREFIX + "/setUserPrimaryIdentity");

                // test route for trustTicketAudit
                from("direct://TRUSTTICKETAUDIT")
                    .to("zendesk://" + PATH_PREFIX + "/trustTicketAudit");

                // test route for trustTicketAudit
                from("direct://TRUSTTICKETAUDIT_1")
                    .to("zendesk://" + PATH_PREFIX + "/trustTicketAudit");

                // test route for trustTicketAudit
                from("direct://TRUSTTICKETAUDIT_2")
                    .to("zendesk://" + PATH_PREFIX + "/trustTicketAudit");

                // test route for updateArticle
                from("direct://UPDATEARTICLE")
                    .to("zendesk://" + PATH_PREFIX + "/updateArticle?inBody=article");

                // test route for updateArticleTranslation
                from("direct://UPDATEARTICLETRANSLATION")
                    .to("zendesk://" + PATH_PREFIX + "/updateArticleTranslation");

                // test route for updateAutomation
                from("direct://UPDATEAUTOMATION")
                    .to("zendesk://" + PATH_PREFIX + "/updateAutomation");

                // test route for updateCategory
                from("direct://UPDATECATEGORY")
                    .to("zendesk://" + PATH_PREFIX + "/updateCategory?inBody=category");

                // test route for updateCategoryTranslation
                from("direct://UPDATECATEGORYTRANSLATION")
                    .to("zendesk://" + PATH_PREFIX + "/updateCategoryTranslation");

                // test route for updateForum
                from("direct://UPDATEFORUM")
                    .to("zendesk://" + PATH_PREFIX + "/updateForum?inBody=forum");

                // test route for updateGroup
                from("direct://UPDATEGROUP")
                    .to("zendesk://" + PATH_PREFIX + "/updateGroup?inBody=group");

                // test route for updateInstallation
                from("direct://UPDATEINSTALLATION")
                    .to("zendesk://" + PATH_PREFIX + "/updateInstallation");

                // test route for updateMacro
                from("direct://UPDATEMACRO")
                    .to("zendesk://" + PATH_PREFIX + "/updateMacro");

                // test route for updateOrganization
                from("direct://UPDATEORGANIZATION")
                    .to("zendesk://" + PATH_PREFIX + "/updateOrganization?inBody=organization");

                // test route for updateRequest
                from("direct://UPDATEREQUEST")
                    .to("zendesk://" + PATH_PREFIX + "/updateRequest?inBody=request");

                // test route for updateSection
                from("direct://UPDATESECTION")
                    .to("zendesk://" + PATH_PREFIX + "/updateSection?inBody=section");

                // test route for updateSectionTranslation
                from("direct://UPDATESECTIONTRANSLATION")
                    .to("zendesk://" + PATH_PREFIX + "/updateSectionTranslation");

                // test route for updateTicket
                from("direct://UPDATETICKET")
                    .to("zendesk://" + PATH_PREFIX + "/updateTicket?inBody=ticket");

                // test route for updateTicketField
                from("direct://UPDATETICKETFIELD")
                    .to("zendesk://" + PATH_PREFIX + "/updateTicketField?inBody=field");

                // test route for updateTopic
                from("direct://UPDATETOPIC")
                    .to("zendesk://" + PATH_PREFIX + "/updateTopic?inBody=topic");

                // test route for updateTrigger
                from("direct://UPDATETRIGGER")
                    .to("zendesk://" + PATH_PREFIX + "/updateTrigger");

                // test route for updateUser
                from("direct://UPDATEUSER")
                    .to("zendesk://" + PATH_PREFIX + "/updateUser?inBody=user");

                // test route for updateUserIdentity
                from("direct://UPDATEUSERIDENTITY")
                    .to("zendesk://" + PATH_PREFIX + "/updateUserIdentity");

                // test route for updateUserIdentity
                from("direct://UPDATEUSERIDENTITY_1")
                    .to("zendesk://" + PATH_PREFIX + "/updateUserIdentity");

                // test route for verifyUserIdentity
                from("direct://VERIFYUSERIDENTITY")
                    .to("zendesk://" + PATH_PREFIX + "/verifyUserIdentity");

                // test route for verifyUserIdentity
                from("direct://VERIFYUSERIDENTITY_1")
                    .to("zendesk://" + PATH_PREFIX + "/verifyUserIdentity");

                // test route for verifyUserIdentity
                from("direct://VERIFYUSERIDENTITY_2")
                    .to("zendesk://" + PATH_PREFIX + "/verifyUserIdentity");

            }
        };
    }
}
